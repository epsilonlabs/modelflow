[% import "../../util.eol"; %]
package reactive.component;

import reactive.connector.IConnector;

public class [%= name.firstToUpperCase() %] {
	
	[% for (p in c.ports){ %]
	private Double [%= p.name.firstToLowerCase() %] = null; 
	[% } 
	for (p in c.ports){ %]
	private IConnector [%= p.name.firstToLowerCase() %]Connector = null; 
	[% } %]
	
	public [%= name.firstToUpperCase() %]([%
	for (p in c.ports){ %]IConnector [%= p.name.firstToLowerCase() %]Connector[% if(hasMore) { %], [% } } %]) {
	[%for (p in c.ports){ %]
		this.[%= p.name.firstToLowerCase() %]Connector = [%= p.name.firstToLowerCase() %]Connector;
		[%if (p.isInport()){%]
		this.[%= p.name.firstToLowerCase() %]Connector.doOnNext(this::set[%= p.name.firstToUpperCase() %]);
		[% } } %]
	}
	
	[% for (p in c.ports.select(p | p.isInport())){%]
	public void set[%= p.name.firstToUpperCase() %](Double next){
		this.[%= p.name.firstToLowerCase() %] = next;
		System.out.println("[%= p.container.name + '.' + p.name.firstToLowerCase() %]:" + this.[%= p.name.firstToLowerCase() %]);
		this.compute();
	}
	[% } %]	
	private void compute() {
		if ([% for (p in c.ports.select(p|p.isInport())){ %]this.[%= p.name.firstToLowerCase() %] != null[% 
		if(hasMore) { %] && [% } } %]) {
			[%= out.startPreserve("/*", "*/", "compute", true) %]
			// TODO logic
			System.out.println("[%= name.firstToUpperCase() %] computed " + this.[%=c.ports.selectOne(p|p.isOutport()).name %]);
			this.[%=c.ports.selectOne(p|p.isOutport()).name %]Connector.onNext(this.[%=c.ports.selectOne(p|p.isOutport()).name %]);
			[%= out.stopPreserve() %]
		}
	}
	
}