<?xml version="1.0" encoding="ASCII"?>
<core:IPackageFragment xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:core="org.amma.dsl.jdt.core" xmlns:dom="org.amma.dsl.jdt.dom" elementName="org.eclipse.jdt.internal.apt.pluggable.core.filer" isDefaultPackage="false">
  <packageFragmentRoot xsi:type="core:SourcePackageFragmentRoot" href="../IJavaProject_org.eclipse.jdt.apt.pluggable.core.xmi#//@packageFragmentRoots.0"/>
  <compilationUnits elementName="IdeJavaSourceOutputStream.java">
    <imports elementName="java.io.ByteArrayOutputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.IOException" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.util.Collection" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.resources.IFile" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.runtime.CoreException" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.apt.core.env.Phase" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.apt.core.internal.generatedfile.FileGenerationResult" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.apt.core.internal.generatedfile.GeneratedFileManager" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.internal.apt.pluggable.core.Apt6Plugin" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl" isOnDemand="false" isStatic="false"/>
    <types elementName="IdeJavaSourceOutputStream" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeJavaSourceOutputStream" fullyQualifiedParametrizedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeJavaSourceOutputStream">
      <fields elementName="_env" isEnumConstant="false" typeSignature="QIdeProcessingEnvImpl;" isVolatile="false" isTransient="false"/>
      <fields elementName="_name" isEnumConstant="false" typeSignature="QCharSequence;" isVolatile="false" isTransient="false"/>
      <fields elementName="_parentFiles" isEnumConstant="false" typeSignature="QCollection&lt;QIFile;>;" isVolatile="false" isTransient="false"/>
      <fields elementName="_closed" isEnumConstant="false" typeSignature="Z" isVolatile="false" isTransient="false"/>
      <methods elementName="IdeJavaSourceOutputStream" returnType="V" isConstructor="true" isMainMethod="false">
        <parameters name="env" type="QIdeProcessingEnvImpl;"/>
        <parameters name="name" type="QCharSequence;"/>
        <parameters name="parentFiles" type="QCollection&lt;QIFile;>;"/>
      </methods>
      <methods elementName="close" returnType="V" isConstructor="false" isMainMethod="false">
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
    </types>
    <ast>
      <package>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Copyright (c) 2007 BEA Systems, Inc. "/>
            <fragments xsi:type="dom:TextElement" text="All rights reserved. This program and the accompanying materials"/>
            <fragments xsi:type="dom:TextElement" text="are made available under the terms of the Eclipse Public License v1.0"/>
            <fragments xsi:type="dom:TextElement" text="which accompanies this distribution, and is available at"/>
            <fragments xsi:type="dom:TextElement" text="http://www.eclipse.org/legal/epl-v10.html"/>
            <fragments xsi:type="dom:TextElement" text="Contributors:"/>
            <fragments xsi:type="dom:TextElement" text="wharley@bea.com - initial API and implementation"/>
          </tags>
        </javadoc>
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer">
          <name fullyQualifiedName="filer" identifier="filer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
              <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                  <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </package>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.ByteArrayOutputStream">
          <name fullyQualifiedName="ByteArrayOutputStream" identifier="ByteArrayOutputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.IOException">
          <name fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.util.Collection">
          <name fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.util">
            <name fullyQualifiedName="util" identifier="util" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources.IFile">
          <name fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources">
            <name fullyQualifiedName="resources" identifier="resources" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime.CoreException">
          <name fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime">
            <name fullyQualifiedName="runtime" identifier="runtime" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.env.Phase">
          <name fullyQualifiedName="Phase" identifier="Phase" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.env">
            <name fullyQualifiedName="env" identifier="env" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                  <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                    <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                    <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal.generatedfile.FileGenerationResult">
          <name fullyQualifiedName="FileGenerationResult" identifier="FileGenerationResult" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal.generatedfile">
            <name fullyQualifiedName="generatedfile" identifier="generatedfile" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal">
              <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core">
                <name fullyQualifiedName="core" identifier="core" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal.generatedfile.GeneratedFileManager">
          <name fullyQualifiedName="GeneratedFileManager" identifier="GeneratedFileManager" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal.generatedfile">
            <name fullyQualifiedName="generatedfile" identifier="generatedfile" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal">
              <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core">
                <name fullyQualifiedName="core" identifier="core" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.Apt6Plugin">
          <name fullyQualifiedName="Apt6Plugin" identifier="Apt6Plugin" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
              <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                  <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl">
          <name fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch">
            <name fullyQualifiedName="dispatch" identifier="dispatch" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
                <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                    <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                      <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                      <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                        <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                        <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                      </qualifier>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <types xsi:type="dom:TypeDeclaration" localTypeDeclaration="false" memberTypeDeclaration="false" packageMemberTypeDeclaration="true" interface="false">
        <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="OutputStream used by the IdeFilerImpl to generate Java source files."/>
          </tags>
          <tags tagName="@since" nested="false">
            <fragments xsi:type="dom:TextElement" text=" 3.3"/>
          </tags>
        </javadoc>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_env" identifier="_env" declaration="true"/>
          </fragments>
          <type xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_name" identifier="_name" declaration="true"/>
          </fragments>
          <type xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="true"/>
          </fragments>
          <type xsi:type="dom:ParameterizedType">
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
            </type>
            <typeArguments xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
            </typeArguments>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <initializer xsi:type="dom:BooleanLiteral" booleanValue="false"/>
            <name fullyQualifiedName="_closed" identifier="_closed" declaration="true"/>
          </fragments>
          <type xsi:type="dom:PrimitiveType" code="boolean"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="true" varargs="false">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="env" identifier="env" declaration="false"/>
              </expression>
            </statements>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_name" identifier="_name" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="name" identifier="name" declaration="false"/>
              </expression>
            </statements>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="false"/>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="IdeJavaSourceOutputStream" identifier="IdeJavaSourceOutputStream" declaration="false"/>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="env" identifier="env" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="name" identifier="name" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="true"/>
            <type xsi:type="dom:ParameterizedType">
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
              </type>
              <typeArguments xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
              </typeArguments>
            </type>
          </parameters>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:SynchronizedStatement">
              <body>
                <statements xsi:type="dom:IfStatement">
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="_closed" identifier="_closed" declaration="false"/>
                  <thenStatement xsi:type="dom:Block">
                    <statements xsi:type="dom:ReturnStatement"/>
                  </thenStatement>
                </statements>
                <statements xsi:type="dom:ExpressionStatement">
                  <expression xsi:type="dom:Assignment" operator="=">
                    <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_closed" identifier="_closed" declaration="false"/>
                    <rightHandSide xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                  </expression>
                </statements>
              </body>
              <expression xsi:type="dom:ThisExpression"/>
            </statements>
            <statements xsi:type="dom:TryStatement">
              <catchClauses>
                <body>
                  <statements xsi:type="dom:ExpressionStatement">
                    <expression xsi:type="dom:MethodInvocation">
                      <arguments xsi:type="dom:SimpleName" fullyQualifiedName="ce" identifier="ce" declaration="false"/>
                      <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Unable to generate type when IdeJavaSourceOutputStream was closed&quot;"/>
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="Apt6Plugin" identifier="Apt6Plugin" declaration="false"/>
                      <name fullyQualifiedName="log" identifier="log" declaration="false"/>
                    </expression>
                  </statements>
                </body>
                <exception extraDimensions="0" varargs="false">
                  <name fullyQualifiedName="ce" identifier="ce" declaration="true"/>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
                  </type>
                </exception>
              </catchClauses>
              <body>
                <statements xsi:type="dom:VariableDeclarationStatement">
                  <fragments extraDimensions="0">
                    <initializer xsi:type="dom:MethodInvocation">
                      <expression xsi:type="dom:MethodInvocation">
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                        <name fullyQualifiedName="getAptProject" identifier="getAptProject" declaration="false"/>
                      </expression>
                      <name fullyQualifiedName="getGeneratedFileManager" identifier="getGeneratedFileManager" declaration="false"/>
                    </initializer>
                    <name fullyQualifiedName="gfm" identifier="gfm" declaration="true"/>
                  </fragments>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="GeneratedFileManager" identifier="GeneratedFileManager" declaration="false"/>
                  </type>
                </statements>
                <statements xsi:type="dom:VariableDeclarationStatement">
                  <fragments extraDimensions="0">
                    <initializer xsi:type="dom:MethodInvocation">
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                      <name fullyQualifiedName="getPhase" identifier="getPhase" declaration="false"/>
                    </initializer>
                    <name fullyQualifiedName="phase" identifier="phase" declaration="true"/>
                  </fragments>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="Phase" identifier="Phase" declaration="false"/>
                  </type>
                </statements>
                <statements xsi:type="dom:VariableDeclarationStatement">
                  <fragments extraDimensions="0">
                    <initializer xsi:type="dom:NullLiteral"/>
                    <name fullyQualifiedName="result" identifier="result" declaration="true"/>
                  </fragments>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="FileGenerationResult" identifier="FileGenerationResult" declaration="false"/>
                  </type>
                </statements>
                <statements xsi:type="dom:IfStatement">
                  <elseStatement xsi:type="dom:IfStatement">
                    <expression xsi:type="dom:InfixExpression" operator="==">
                      <leftOperand xsi:type="dom:SimpleName" fullyQualifiedName="phase" identifier="phase" declaration="false"/>
                      <rightOperand xsi:type="dom:QualifiedName" fullyQualifiedName="Phase.BUILD">
                        <name fullyQualifiedName="BUILD" identifier="BUILD" declaration="false"/>
                        <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="Phase" identifier="Phase" declaration="false"/>
                      </rightOperand>
                    </expression>
                    <thenStatement xsi:type="dom:Block">
                      <statements xsi:type="dom:ExpressionStatement">
                        <expression xsi:type="dom:Assignment" operator="=">
                          <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="result" identifier="result" declaration="false"/>
                          <rightHandSide xsi:type="dom:MethodInvocation">
                            <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
                            <arguments xsi:type="dom:MethodInvocation">
                              <expression xsi:type="dom:SimpleName" fullyQualifiedName="_name" identifier="_name" declaration="false"/>
                              <name fullyQualifiedName="toString" identifier="toString" declaration="false"/>
                            </arguments>
                            <arguments xsi:type="dom:MethodInvocation">
                              <expression xsi:type="dom:ThisExpression"/>
                              <name fullyQualifiedName="toString" identifier="toString" declaration="false"/>
                            </arguments>
                            <arguments xsi:type="dom:MethodInvocation">
                              <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                              <name fullyQualifiedName="currentProcessorSupportsRTTG" identifier="currentProcessorSupportsRTTG" declaration="false"/>
                            </arguments>
                            <arguments xsi:type="dom:NullLiteral"/>
                            <expression xsi:type="dom:SimpleName" fullyQualifiedName="gfm" identifier="gfm" declaration="false"/>
                            <name fullyQualifiedName="generateFileDuringBuild" identifier="generateFileDuringBuild" declaration="false"/>
                          </rightHandSide>
                        </expression>
                      </statements>
                    </thenStatement>
                  </elseStatement>
                  <expression xsi:type="dom:InfixExpression" operator="==">
                    <leftOperand xsi:type="dom:SimpleName" fullyQualifiedName="phase" identifier="phase" declaration="false"/>
                    <rightOperand xsi:type="dom:QualifiedName" fullyQualifiedName="Phase.RECONCILE">
                      <name fullyQualifiedName="RECONCILE" identifier="RECONCILE" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="Phase" identifier="Phase" declaration="false"/>
                    </rightOperand>
                  </expression>
                  <thenStatement xsi:type="dom:Block"/>
                </statements>
                <statements xsi:type="dom:IfStatement">
                  <expression xsi:type="dom:InfixExpression" operator="!=">
                    <leftOperand xsi:type="dom:SimpleName" fullyQualifiedName="result" identifier="result" declaration="false"/>
                    <rightOperand xsi:type="dom:NullLiteral"/>
                  </expression>
                  <thenStatement xsi:type="dom:Block">
                    <statements xsi:type="dom:ExpressionStatement">
                      <expression xsi:type="dom:MethodInvocation">
                        <arguments xsi:type="dom:SimpleName" fullyQualifiedName="result" identifier="result" declaration="false"/>
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                        <name fullyQualifiedName="addNewUnit" identifier="addNewUnit" declaration="false"/>
                      </expression>
                    </statements>
                  </thenStatement>
                </statements>
              </body>
            </statements>
          </body>
          <name fullyQualifiedName="close" identifier="close" declaration="true"/>
          <returnType xsi:type="dom:PrimitiveType" code="void"/>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <name fullyQualifiedName="IdeJavaSourceOutputStream" identifier="IdeJavaSourceOutputStream" declaration="true"/>
        <superclassType xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="ByteArrayOutputStream" identifier="ByteArrayOutputStream" declaration="false"/>
        </superclassType>
      </types>
    </ast>
  </compilationUnits>
  <compilationUnits elementName="IdeOutputJavaFileObject.java">
    <imports elementName="java.io.IOException" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.OutputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.PrintWriter" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.Writer" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.net.URI" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.util.Collection" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.lang.model.element.Modifier" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.lang.model.element.NestingKind" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.tools.JavaFileObject" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.resources.IFile" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl" isOnDemand="false" isStatic="false"/>
    <types elementName="IdeOutputJavaFileObject" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeOutputJavaFileObject" fullyQualifiedParametrizedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeOutputJavaFileObject">
      <fields elementName="_env" isEnumConstant="false" typeSignature="QIdeProcessingEnvImpl;" isVolatile="false" isTransient="false"/>
      <fields elementName="_name" isEnumConstant="false" typeSignature="QCharSequence;" isVolatile="false" isTransient="false"/>
      <fields elementName="_parentFiles" isEnumConstant="false" typeSignature="QCollection&lt;QIFile;>;" isVolatile="false" isTransient="false"/>
      <methods elementName="IdeOutputJavaFileObject" returnType="V" isConstructor="true" isMainMethod="false">
        <parameters name="env" type="QIdeProcessingEnvImpl;"/>
        <parameters name="name" type="QCharSequence;"/>
        <parameters name="parentFiles" type="QCollection&lt;QIFile;>;"/>
      </methods>
      <methods elementName="getAccessLevel" returnType="QModifier;" isConstructor="false" isMainMethod="false"/>
      <methods elementName="getKind" returnType="QKind;" isConstructor="false" isMainMethod="false"/>
      <methods elementName="getName" returnType="QString;" isConstructor="false" isMainMethod="false"/>
      <methods elementName="getNestingKind" returnType="QNestingKind;" isConstructor="false" isMainMethod="false"/>
      <methods elementName="isNameCompatible" returnType="Z" isConstructor="false" isMainMethod="false">
        <parameters name="simpleName" type="QString;"/>
        <parameters name="kind" type="QKind;"/>
      </methods>
      <methods elementName="openOutputStream" returnType="QOutputStream;" isConstructor="false" isMainMethod="false">
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="openWriter" returnType="QWriter;" isConstructor="false" isMainMethod="false">
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="toUri" returnType="QURI;" isConstructor="false" isMainMethod="false"/>
    </types>
    <ast>
      <package>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Copyright (c) 2007 BEA Systems, Inc. "/>
            <fragments xsi:type="dom:TextElement" text="All rights reserved. This program and the accompanying materials"/>
            <fragments xsi:type="dom:TextElement" text="are made available under the terms of the Eclipse Public License v1.0"/>
            <fragments xsi:type="dom:TextElement" text="which accompanies this distribution, and is available at"/>
            <fragments xsi:type="dom:TextElement" text="http://www.eclipse.org/legal/epl-v10.html"/>
            <fragments xsi:type="dom:TextElement" text="Contributors:"/>
            <fragments xsi:type="dom:TextElement" text="wharley@bea.com - initial API and implementation"/>
          </tags>
        </javadoc>
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer">
          <name fullyQualifiedName="filer" identifier="filer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
              <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                  <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </package>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.IOException">
          <name fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.OutputStream">
          <name fullyQualifiedName="OutputStream" identifier="OutputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.PrintWriter">
          <name fullyQualifiedName="PrintWriter" identifier="PrintWriter" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.Writer">
          <name fullyQualifiedName="Writer" identifier="Writer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.net.URI">
          <name fullyQualifiedName="URI" identifier="URI" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.net">
            <name fullyQualifiedName="net" identifier="net" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.util.Collection">
          <name fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.util">
            <name fullyQualifiedName="util" identifier="util" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model.element.Modifier">
          <name fullyQualifiedName="Modifier" identifier="Modifier" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model.element">
            <name fullyQualifiedName="element" identifier="element" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model">
              <name fullyQualifiedName="model" identifier="model" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang">
                <name fullyQualifiedName="lang" identifier="lang" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model.element.NestingKind">
          <name fullyQualifiedName="NestingKind" identifier="NestingKind" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model.element">
            <name fullyQualifiedName="element" identifier="element" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model">
              <name fullyQualifiedName="model" identifier="model" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang">
                <name fullyQualifiedName="lang" identifier="lang" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.JavaFileObject">
          <name fullyQualifiedName="JavaFileObject" identifier="JavaFileObject" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools">
            <name fullyQualifiedName="tools" identifier="tools" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources.IFile">
          <name fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources">
            <name fullyQualifiedName="resources" identifier="resources" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl">
          <name fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch">
            <name fullyQualifiedName="dispatch" identifier="dispatch" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
                <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                    <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                      <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                      <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                        <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                        <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                      </qualifier>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <types xsi:type="dom:TypeDeclaration" localTypeDeclaration="false" memberTypeDeclaration="false" packageMemberTypeDeclaration="true" interface="false">
        <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Implementation of JavaFileObject used for Java 6 annotation processing within the IDE."/>
            <fragments xsi:type="dom:TextElement" text="This object is used only for writing source and class files."/>
          </tags>
          <tags tagName="@since" nested="false">
            <fragments xsi:type="dom:TextElement" text=" 3.3"/>
          </tags>
        </javadoc>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_env" identifier="_env" declaration="true"/>
          </fragments>
          <type xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_name" identifier="_name" declaration="true"/>
          </fragments>
          <type xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="true"/>
          </fragments>
          <type xsi:type="dom:ParameterizedType">
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
            </type>
            <typeArguments xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
            </typeArguments>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="true" varargs="false">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="env" identifier="env" declaration="false"/>
              </expression>
            </statements>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="false"/>
              </expression>
            </statements>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_name" identifier="_name" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="name" identifier="name" declaration="false"/>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="IdeOutputJavaFileObject" identifier="IdeOutputJavaFileObject" declaration="false"/>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="env" identifier="env" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="name" identifier="name" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="true"/>
            <type xsi:type="dom:ParameterizedType">
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
              </type>
              <typeArguments xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
              </typeArguments>
            </type>
          </parameters>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Not yet implemented&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="UnsupportedOperationException" identifier="UnsupportedOperationException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getAccessLevel" identifier="getAccessLevel" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="Modifier" identifier="Modifier" declaration="false"/>
          </returnType>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Not yet implemented&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="UnsupportedOperationException" identifier="UnsupportedOperationException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getKind" identifier="getKind" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="Kind" identifier="Kind" declaration="false"/>
          </returnType>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:MethodInvocation">
                <expression xsi:type="dom:SimpleName" fullyQualifiedName="_name" identifier="_name" declaration="false"/>
                <name fullyQualifiedName="toString" identifier="toString" declaration="false"/>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getName" identifier="getName" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="String" identifier="String" declaration="false"/>
          </returnType>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Not yet implemented&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="UnsupportedOperationException" identifier="UnsupportedOperationException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getNestingKind" identifier="getNestingKind" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="NestingKind" identifier="NestingKind" declaration="false"/>
          </returnType>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Not yet implemented&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="UnsupportedOperationException" identifier="UnsupportedOperationException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="isNameCompatible" identifier="isNameCompatible" declaration="true"/>
          <returnType xsi:type="dom:PrimitiveType" code="boolean"/>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="simpleName" identifier="simpleName" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="String" identifier="String" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="kind" identifier="kind" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Kind" identifier="Kind" declaration="false"/>
            </type>
          </parameters>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_name" identifier="_name" declaration="false"/>
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeJavaSourceOutputStream" identifier="IdeJavaSourceOutputStream" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="openOutputStream" identifier="openOutputStream" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="OutputStream" identifier="OutputStream" declaration="false"/>
          </returnType>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:MethodInvocation">
                  <name fullyQualifiedName="openOutputStream" identifier="openOutputStream" declaration="false"/>
                </arguments>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="PrintWriter" identifier="PrintWriter" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="openWriter" identifier="openWriter" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="Writer" identifier="Writer" declaration="false"/>
          </returnType>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Not yet implemented&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="UnsupportedOperationException" identifier="UnsupportedOperationException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="toUri" identifier="toUri" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="URI" identifier="URI" declaration="false"/>
          </returnType>
        </bodyDeclarations>
        <name fullyQualifiedName="IdeOutputJavaFileObject" identifier="IdeOutputJavaFileObject" declaration="true"/>
        <superclassType xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeOutputFileObject" identifier="IdeOutputFileObject" declaration="false"/>
        </superclassType>
        <superInterfaceTypes xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="JavaFileObject" identifier="JavaFileObject" declaration="false"/>
        </superInterfaceTypes>
      </types>
    </ast>
  </compilationUnits>
  <compilationUnits elementName="IdeOutputNonSourceFileObject.java">
    <imports elementName="java.io.IOException" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.OutputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.PrintWriter" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.Writer" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.net.URI" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.util.Collection" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.util.Set" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.tools.JavaFileManager.Location" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.resources.IFile" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl" isOnDemand="false" isStatic="false"/>
    <types elementName="IdeOutputNonSourceFileObject" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeOutputNonSourceFileObject" fullyQualifiedParametrizedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeOutputNonSourceFileObject">
      <fields elementName="_env" isEnumConstant="false" typeSignature="QIdeProcessingEnvImpl;" isVolatile="false" isTransient="false"/>
      <fields elementName="_file" isEnumConstant="false" typeSignature="QIFile;" isVolatile="false" isTransient="false"/>
      <fields elementName="_parentFiles" isEnumConstant="false" typeSignature="QCollection&lt;QIFile;>;" isVolatile="false" isTransient="false"/>
      <methods elementName="IdeOutputNonSourceFileObject" returnType="V" isConstructor="true" isMainMethod="false">
        <parameters name="env" type="QIdeProcessingEnvImpl;"/>
        <parameters name="file" type="QIFile;"/>
        <parameters name="parentFiles" type="QSet&lt;QIFile;>;"/>
      </methods>
      <methods elementName="getName" returnType="QString;" isConstructor="false" isMainMethod="false"/>
      <methods elementName="openOutputStream" returnType="QOutputStream;" isConstructor="false" isMainMethod="false">
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="openWriter" returnType="QWriter;" isConstructor="false" isMainMethod="false">
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="toUri" returnType="QURI;" isConstructor="false" isMainMethod="false"/>
    </types>
    <ast>
      <package>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Copyright (c) 2007 BEA Systems, Inc."/>
            <fragments xsi:type="dom:TextElement" text="All rights reserved. This program and the accompanying materials"/>
            <fragments xsi:type="dom:TextElement" text="are made available under the terms of the Eclipse Public License v1.0"/>
            <fragments xsi:type="dom:TextElement" text="which accompanies this distribution, and is available at"/>
            <fragments xsi:type="dom:TextElement" text="http://www.eclipse.org/legal/epl-v10.html"/>
            <fragments xsi:type="dom:TextElement" text="Contributors:"/>
            <fragments xsi:type="dom:TextElement" text="wharley@bea.com - initial API and implementation"/>
          </tags>
        </javadoc>
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer">
          <name fullyQualifiedName="filer" identifier="filer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
              <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                  <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </package>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.IOException">
          <name fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.OutputStream">
          <name fullyQualifiedName="OutputStream" identifier="OutputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.PrintWriter">
          <name fullyQualifiedName="PrintWriter" identifier="PrintWriter" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.Writer">
          <name fullyQualifiedName="Writer" identifier="Writer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.net.URI">
          <name fullyQualifiedName="URI" identifier="URI" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.net">
            <name fullyQualifiedName="net" identifier="net" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.util.Collection">
          <name fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.util">
            <name fullyQualifiedName="util" identifier="util" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.util.Set">
          <name fullyQualifiedName="Set" identifier="Set" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.util">
            <name fullyQualifiedName="util" identifier="util" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.JavaFileManager.Location">
          <name fullyQualifiedName="Location" identifier="Location" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.JavaFileManager">
            <name fullyQualifiedName="JavaFileManager" identifier="JavaFileManager" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools">
              <name fullyQualifiedName="tools" identifier="tools" declaration="false"/>
              <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources.IFile">
          <name fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources">
            <name fullyQualifiedName="resources" identifier="resources" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl">
          <name fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch">
            <name fullyQualifiedName="dispatch" identifier="dispatch" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
                <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                    <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                      <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                      <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                        <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                        <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                      </qualifier>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <types xsi:type="dom:TypeDeclaration" localTypeDeclaration="false" memberTypeDeclaration="false" packageMemberTypeDeclaration="true" interface="false">
        <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Implementation of FileObject for generating resource files in the IDE.  "/>
            <fragments xsi:type="dom:TextElement" text="This is used for files that are neither class files nor Java source files."/>
          </tags>
          <tags tagName="@see" nested="false">
            <fragments xsi:type="dom:SimpleName" fullyQualifiedName="IdeOutputJavaFileObject" identifier="IdeOutputJavaFileObject" declaration="false"/>
          </tags>
        </javadoc>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_env" identifier="_env" declaration="true"/>
          </fragments>
          <type xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_file" identifier="_file" declaration="true"/>
          </fragments>
          <type xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="true"/>
          </fragments>
          <type xsi:type="dom:ParameterizedType">
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
            </type>
            <typeArguments xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
            </typeArguments>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="true" varargs="false">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <javadoc>
            <tags nested="false">
              <fragments xsi:type="dom:TextElement" text="Create a new IdeOutputFileObject for writing.  The file will not actually be written until the Writer or OutputStream is closed."/>
            </tags>
            <tags tagName="@param" nested="false">
              <fragments xsi:type="dom:SimpleName" fullyQualifiedName="env" identifier="env" declaration="false"/>
              <fragments xsi:type="dom:TextElement" text=" among other roles, the ProcessingEnvironment tracks what files have been generated in a given build."/>
            </tags>
            <tags tagName="@param" nested="false">
              <fragments xsi:type="dom:SimpleName" fullyQualifiedName="location" identifier="location" declaration="false"/>
              <fragments xsi:type="dom:TextElement" text=" must be an output location (see "/>
              <fragments xsi:type="dom:TagElement" tagName="@link" nested="true">
                <fragments xsi:type="dom:MethodRef">
                  <name fullyQualifiedName="isOutputLocation" identifier="isOutputLocation" declaration="false"/>
                  <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="Location" identifier="Location" declaration="false"/>
                </fragments>
              </fragments>
              <fragments xsi:type="dom:TextElement" text=")."/>
            </tags>
            <tags tagName="@param" nested="false">
              <fragments xsi:type="dom:SimpleName" fullyQualifiedName="pkg" identifier="pkg" declaration="false"/>
            </tags>
            <tags tagName="@param" nested="false">
              <fragments xsi:type="dom:SimpleName" fullyQualifiedName="relativeName" identifier="relativeName" declaration="false"/>
            </tags>
            <tags tagName="@param" nested="false">
              <fragments xsi:type="dom:SimpleName" fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="false"/>
            </tags>
            <tags tagName="@see" nested="false">
              <fragments xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.StandardLocation">
                <name fullyQualifiedName="StandardLocation" identifier="StandardLocation" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools">
                  <name fullyQualifiedName="tools" identifier="tools" declaration="false"/>
                  <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
                </qualifier>
              </fragments>
            </tags>
          </javadoc>
          <body>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="env" identifier="env" declaration="false"/>
              </expression>
            </statements>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="file" identifier="file" declaration="false"/>
              </expression>
            </statements>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="false"/>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="IdeOutputNonSourceFileObject" identifier="IdeOutputNonSourceFileObject" declaration="false"/>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="env" identifier="env" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="file" identifier="file" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="true"/>
            <type xsi:type="dom:ParameterizedType">
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="Set" identifier="Set" declaration="false"/>
              </type>
              <typeArguments xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
              </typeArguments>
            </type>
          </parameters>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Not yet implemented&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="UnsupportedOperationException" identifier="UnsupportedOperationException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getName" identifier="getName" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="String" identifier="String" declaration="false"/>
          </returnType>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeNonSourceOutputStream" identifier="IdeNonSourceOutputStream" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="openOutputStream" identifier="openOutputStream" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="OutputStream" identifier="OutputStream" declaration="false"/>
          </returnType>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:MethodInvocation">
                  <name fullyQualifiedName="openOutputStream" identifier="openOutputStream" declaration="false"/>
                </arguments>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="PrintWriter" identifier="PrintWriter" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="openWriter" identifier="openWriter" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="Writer" identifier="Writer" declaration="false"/>
          </returnType>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Not yet implemented&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="UnsupportedOperationException" identifier="UnsupportedOperationException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="toUri" identifier="toUri" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="URI" identifier="URI" declaration="false"/>
          </returnType>
        </bodyDeclarations>
        <name fullyQualifiedName="IdeOutputNonSourceFileObject" identifier="IdeOutputNonSourceFileObject" declaration="true"/>
        <superclassType xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeOutputFileObject" identifier="IdeOutputFileObject" declaration="false"/>
        </superclassType>
      </types>
    </ast>
  </compilationUnits>
  <compilationUnits elementName="IdeNonSourceOutputStream.java">
    <imports elementName="java.io.BufferedInputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.ByteArrayInputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.ByteArrayOutputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.IOException" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.InputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.util.Collection" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.resources.IFile" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.runtime.CoreException" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.apt.core.internal.env.BinaryFileOutputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.apt.core.internal.util.FileSystemUtil" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.internal.apt.pluggable.core.Apt6Plugin" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl" isOnDemand="false" isStatic="false"/>
    <types elementName="IdeNonSourceOutputStream" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeNonSourceOutputStream" fullyQualifiedParametrizedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeNonSourceOutputStream">
      <fields elementName="_env" isEnumConstant="false" typeSignature="QIdeProcessingEnvImpl;" isVolatile="false" isTransient="false"/>
      <fields elementName="_file" isEnumConstant="false" typeSignature="QIFile;" isVolatile="false" isTransient="false"/>
      <fields elementName="_parentFiles" isEnumConstant="false" typeSignature="QCollection&lt;QIFile;>;" isVolatile="false" isTransient="false"/>
      <methods elementName="IdeNonSourceOutputStream" returnType="V" isConstructor="true" isMainMethod="false">
        <parameters name="env" type="QIdeProcessingEnvImpl;"/>
        <parameters name="file" type="QIFile;"/>
        <parameters name="parentFiles" type="QCollection&lt;QIFile;>;"/>
      </methods>
      <methods elementName="close" returnType="V" isConstructor="false" isMainMethod="false">
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="closeInputStream" returnType="V" isConstructor="false" isMainMethod="false">
        <parameters name="stream" type="QInputStream;"/>
      </methods>
      <methods elementName="saveToDisk" returnType="V" isConstructor="false" isMainMethod="false">
        <parameters name="toSave" type="QInputStream;"/>
        <parameters name="create" type="Z"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
    </types>
    <ast>
      <package>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Copyright (c) 2007 BEA Systems, Inc."/>
            <fragments xsi:type="dom:TextElement" text="All rights reserved. This program and the accompanying materials"/>
            <fragments xsi:type="dom:TextElement" text="are made available under the terms of the Eclipse Public License v1.0"/>
            <fragments xsi:type="dom:TextElement" text="which accompanies this distribution, and is available at"/>
            <fragments xsi:type="dom:TextElement" text="http://www.eclipse.org/legal/epl-v10.html"/>
            <fragments xsi:type="dom:TextElement" text="Contributors:"/>
            <fragments xsi:type="dom:TextElement" text="wharley@bea.com - initial API and implementation"/>
          </tags>
        </javadoc>
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer">
          <name fullyQualifiedName="filer" identifier="filer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
              <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                  <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </package>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.BufferedInputStream">
          <name fullyQualifiedName="BufferedInputStream" identifier="BufferedInputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.ByteArrayInputStream">
          <name fullyQualifiedName="ByteArrayInputStream" identifier="ByteArrayInputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.ByteArrayOutputStream">
          <name fullyQualifiedName="ByteArrayOutputStream" identifier="ByteArrayOutputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.IOException">
          <name fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.InputStream">
          <name fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.util.Collection">
          <name fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.util">
            <name fullyQualifiedName="util" identifier="util" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources.IFile">
          <name fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources">
            <name fullyQualifiedName="resources" identifier="resources" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime.CoreException">
          <name fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime">
            <name fullyQualifiedName="runtime" identifier="runtime" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal.env.BinaryFileOutputStream">
          <name fullyQualifiedName="BinaryFileOutputStream" identifier="BinaryFileOutputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal.env">
            <name fullyQualifiedName="env" identifier="env" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal">
              <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core">
                <name fullyQualifiedName="core" identifier="core" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal.util.FileSystemUtil">
          <name fullyQualifiedName="FileSystemUtil" identifier="FileSystemUtil" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal.util">
            <name fullyQualifiedName="util" identifier="util" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal">
              <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core">
                <name fullyQualifiedName="core" identifier="core" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.Apt6Plugin">
          <name fullyQualifiedName="Apt6Plugin" identifier="Apt6Plugin" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
              <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                  <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl">
          <name fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch">
            <name fullyQualifiedName="dispatch" identifier="dispatch" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
                <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                    <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                      <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                      <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                        <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                        <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                      </qualifier>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <types xsi:type="dom:TypeDeclaration" localTypeDeclaration="false" memberTypeDeclaration="false" packageMemberTypeDeclaration="true" interface="false">
        <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
        <javadoc>
          <tags tagName="@see" nested="false">
            <fragments xsi:type="dom:SimpleName" fullyQualifiedName="BinaryFileOutputStream" identifier="BinaryFileOutputStream" declaration="false"/>
          </tags>
        </javadoc>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_env" identifier="_env" declaration="true"/>
          </fragments>
          <type xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_file" identifier="_file" declaration="true"/>
          </fragments>
          <type xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="true"/>
          </fragments>
          <type xsi:type="dom:ParameterizedType">
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
            </type>
            <typeArguments xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
            </typeArguments>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="true" varargs="false">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="env" identifier="env" declaration="false"/>
              </expression>
            </statements>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="file" identifier="file" declaration="false"/>
              </expression>
            </statements>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="false"/>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="IdeNonSourceOutputStream" identifier="IdeNonSourceOutputStream" declaration="false"/>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="env" identifier="env" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="file" identifier="file" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="true"/>
            <type xsi:type="dom:ParameterizedType">
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="Collection" identifier="Collection" declaration="false"/>
              </type>
              <typeArguments xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
              </typeArguments>
            </type>
          </parameters>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:SuperMethodInvocation">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="close" identifier="close" declaration="false"/>
              </expression>
            </statements>
            <statements xsi:type="dom:VariableDeclarationStatement">
              <fragments extraDimensions="0">
                <initializer xsi:type="dom:ClassInstanceCreation">
                  <arguments xsi:type="dom:MethodInvocation">
                    <name fullyQualifiedName="toByteArray" identifier="toByteArray" declaration="false"/>
                  </arguments>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="ByteArrayInputStream" identifier="ByteArrayInputStream" declaration="false"/>
                  </type>
                </initializer>
                <name fullyQualifiedName="contents" identifier="contents" declaration="true"/>
              </fragments>
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
              </type>
            </statements>
            <statements xsi:type="dom:TryStatement">
              <body>
                <statements xsi:type="dom:VariableDeclarationStatement">
                  <fragments extraDimensions="0">
                    <initializer xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                    <name fullyQualifiedName="contentsChanged" identifier="contentsChanged" declaration="true"/>
                  </fragments>
                  <type xsi:type="dom:PrimitiveType" code="boolean"/>
                </statements>
                <statements xsi:type="dom:IfStatement">
                  <elseStatement xsi:type="dom:Block">
                    <statements xsi:type="dom:VariableDeclarationStatement">
                      <fragments extraDimensions="0">
                        <initializer xsi:type="dom:NullLiteral"/>
                        <name fullyQualifiedName="in" identifier="in" declaration="true"/>
                      </fragments>
                      <type xsi:type="dom:SimpleType">
                        <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
                      </type>
                    </statements>
                    <statements xsi:type="dom:VariableDeclarationStatement">
                      <fragments extraDimensions="0">
                        <initializer xsi:type="dom:NullLiteral"/>
                        <name fullyQualifiedName="oldData" identifier="oldData" declaration="true"/>
                      </fragments>
                      <type xsi:type="dom:SimpleType">
                        <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
                      </type>
                    </statements>
                    <statements xsi:type="dom:TryStatement">
                      <catchClauses>
                        <body>
                          <statements xsi:type="dom:ExpressionStatement">
                            <expression xsi:type="dom:Assignment" operator="=">
                              <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="contentsChanged" identifier="contentsChanged" declaration="false"/>
                              <rightHandSide xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                            </expression>
                          </statements>
                        </body>
                        <exception extraDimensions="0" varargs="false">
                          <name fullyQualifiedName="ce" identifier="ce" declaration="true"/>
                          <type xsi:type="dom:SimpleType">
                            <name xsi:type="dom:SimpleName" fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
                          </type>
                        </exception>
                      </catchClauses>
                      <body>
                        <statements xsi:type="dom:ExpressionStatement">
                          <expression xsi:type="dom:Assignment" operator="=">
                            <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="in" identifier="in" declaration="false"/>
                            <rightHandSide xsi:type="dom:ClassInstanceCreation">
                              <arguments xsi:type="dom:MethodInvocation">
                                <name fullyQualifiedName="toByteArray" identifier="toByteArray" declaration="false"/>
                              </arguments>
                              <type xsi:type="dom:SimpleType">
                                <name xsi:type="dom:SimpleName" fullyQualifiedName="ByteArrayInputStream" identifier="ByteArrayInputStream" declaration="false"/>
                              </type>
                            </rightHandSide>
                          </expression>
                        </statements>
                        <statements xsi:type="dom:ExpressionStatement">
                          <expression xsi:type="dom:Assignment" operator="=">
                            <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="oldData" identifier="oldData" declaration="false"/>
                            <rightHandSide xsi:type="dom:ClassInstanceCreation">
                              <arguments xsi:type="dom:MethodInvocation">
                                <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                                <name fullyQualifiedName="getContents" identifier="getContents" declaration="false"/>
                              </arguments>
                              <type xsi:type="dom:SimpleType">
                                <name xsi:type="dom:SimpleName" fullyQualifiedName="BufferedInputStream" identifier="BufferedInputStream" declaration="false"/>
                              </type>
                            </rightHandSide>
                          </expression>
                        </statements>
                        <statements xsi:type="dom:IfStatement">
                          <expression xsi:type="dom:MethodInvocation">
                            <arguments xsi:type="dom:SimpleName" fullyQualifiedName="in" identifier="in" declaration="false"/>
                            <arguments xsi:type="dom:SimpleName" fullyQualifiedName="oldData" identifier="oldData" declaration="false"/>
                            <expression xsi:type="dom:SimpleName" fullyQualifiedName="FileSystemUtil" identifier="FileSystemUtil" declaration="false"/>
                            <name fullyQualifiedName="compareStreams" identifier="compareStreams" declaration="false"/>
                          </expression>
                          <thenStatement xsi:type="dom:Block">
                            <statements xsi:type="dom:ExpressionStatement">
                              <expression xsi:type="dom:Assignment" operator="=">
                                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="contentsChanged" identifier="contentsChanged" declaration="false"/>
                                <rightHandSide xsi:type="dom:BooleanLiteral" booleanValue="false"/>
                              </expression>
                            </statements>
                          </thenStatement>
                        </statements>
                      </body>
                      <finally>
                        <statements xsi:type="dom:ExpressionStatement">
                          <expression xsi:type="dom:MethodInvocation">
                            <arguments xsi:type="dom:SimpleName" fullyQualifiedName="in" identifier="in" declaration="false"/>
                            <name fullyQualifiedName="closeInputStream" identifier="closeInputStream" declaration="false"/>
                          </expression>
                        </statements>
                        <statements xsi:type="dom:ExpressionStatement">
                          <expression xsi:type="dom:MethodInvocation">
                            <arguments xsi:type="dom:SimpleName" fullyQualifiedName="oldData" identifier="oldData" declaration="false"/>
                            <name fullyQualifiedName="closeInputStream" identifier="closeInputStream" declaration="false"/>
                          </expression>
                        </statements>
                      </finally>
                    </statements>
                    <statements xsi:type="dom:IfStatement">
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="contentsChanged" identifier="contentsChanged" declaration="false"/>
                      <thenStatement xsi:type="dom:Block">
                        <statements xsi:type="dom:ExpressionStatement">
                          <expression xsi:type="dom:MethodInvocation">
                            <expression xsi:type="dom:SimpleName" fullyQualifiedName="contents" identifier="contents" declaration="false"/>
                            <name fullyQualifiedName="reset" identifier="reset" declaration="false"/>
                          </expression>
                        </statements>
                        <statements xsi:type="dom:ExpressionStatement">
                          <expression xsi:type="dom:MethodInvocation">
                            <arguments xsi:type="dom:SimpleName" fullyQualifiedName="contents" identifier="contents" declaration="false"/>
                            <arguments xsi:type="dom:BooleanLiteral" booleanValue="false"/>
                            <name fullyQualifiedName="saveToDisk" identifier="saveToDisk" declaration="false"/>
                          </expression>
                        </statements>
                      </thenStatement>
                    </statements>
                  </elseStatement>
                  <expression xsi:type="dom:PrefixExpression" operator="!">
                    <operand xsi:type="dom:MethodInvocation">
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                      <name fullyQualifiedName="exists" identifier="exists" declaration="false"/>
                    </operand>
                  </expression>
                  <thenStatement xsi:type="dom:Block">
                    <statements xsi:type="dom:ExpressionStatement">
                      <expression xsi:type="dom:MethodInvocation">
                        <arguments xsi:type="dom:SimpleName" fullyQualifiedName="contents" identifier="contents" declaration="false"/>
                        <arguments xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                        <name fullyQualifiedName="saveToDisk" identifier="saveToDisk" declaration="false"/>
                      </expression>
                    </statements>
                  </thenStatement>
                </statements>
              </body>
              <finally>
                <statements xsi:type="dom:ExpressionStatement">
                  <expression xsi:type="dom:MethodInvocation">
                    <arguments xsi:type="dom:SimpleName" fullyQualifiedName="contents" identifier="contents" declaration="false"/>
                    <name fullyQualifiedName="closeInputStream" identifier="closeInputStream" declaration="false"/>
                  </expression>
                </statements>
              </finally>
            </statements>
            <statements xsi:type="dom:IfStatement">
              <expression xsi:type="dom:InfixExpression" operator="&amp;&amp;">
                <leftOperand xsi:type="dom:InfixExpression" operator="!=">
                  <leftOperand xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
                  <rightOperand xsi:type="dom:NullLiteral"/>
                </leftOperand>
                <rightOperand xsi:type="dom:PrefixExpression" operator="!">
                  <operand xsi:type="dom:MethodInvocation">
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
                    <name fullyQualifiedName="isEmpty" identifier="isEmpty" declaration="false"/>
                  </operand>
                </rightOperand>
              </expression>
              <thenStatement xsi:type="dom:Block">
                <statements xsi:type="dom:ExpressionStatement">
                  <expression xsi:type="dom:MethodInvocation">
                    <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_parentFiles" identifier="_parentFiles" declaration="false"/>
                    <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                    <expression xsi:type="dom:MethodInvocation">
                      <expression xsi:type="dom:MethodInvocation">
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                        <name fullyQualifiedName="getAptProject" identifier="getAptProject" declaration="false"/>
                      </expression>
                      <name fullyQualifiedName="getGeneratedFileManager" identifier="getGeneratedFileManager" declaration="false"/>
                    </expression>
                    <name fullyQualifiedName="addGeneratedFileDependency" identifier="addGeneratedFileDependency" declaration="false"/>
                  </expression>
                </statements>
                <statements xsi:type="dom:ExpressionStatement">
                  <expression xsi:type="dom:MethodInvocation">
                    <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                    <name fullyQualifiedName="addNewResource" identifier="addNewResource" declaration="false"/>
                  </expression>
                </statements>
              </thenStatement>
            </statements>
          </body>
          <name fullyQualifiedName="close" identifier="close" declaration="true"/>
          <returnType xsi:type="dom:PrimitiveType" code="void"/>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:IfStatement">
              <expression xsi:type="dom:InfixExpression" operator="!=">
                <leftOperand xsi:type="dom:SimpleName" fullyQualifiedName="stream" identifier="stream" declaration="false"/>
                <rightOperand xsi:type="dom:NullLiteral"/>
              </expression>
              <thenStatement xsi:type="dom:Block">
                <statements xsi:type="dom:TryStatement">
                  <catchClauses>
                    <body/>
                    <exception extraDimensions="0" varargs="false">
                      <name fullyQualifiedName="ioe" identifier="ioe" declaration="true"/>
                      <type xsi:type="dom:SimpleType">
                        <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                      </type>
                    </exception>
                  </catchClauses>
                  <body>
                    <statements xsi:type="dom:ExpressionStatement">
                      <expression xsi:type="dom:MethodInvocation">
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="stream" identifier="stream" declaration="false"/>
                        <name fullyQualifiedName="close" identifier="close" declaration="false"/>
                      </expression>
                    </statements>
                  </body>
                </statements>
              </thenStatement>
            </statements>
          </body>
          <name fullyQualifiedName="closeInputStream" identifier="closeInputStream" declaration="true"/>
          <returnType xsi:type="dom:PrimitiveType" code="void"/>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="stream" identifier="stream" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
            </type>
          </parameters>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:TryStatement">
              <catchClauses>
                <body>
                  <statements xsi:type="dom:IfStatement">
                    <elseStatement xsi:type="dom:Block">
                      <statements xsi:type="dom:ExpressionStatement">
                        <expression xsi:type="dom:MethodInvocation">
                          <arguments xsi:type="dom:SimpleName" fullyQualifiedName="ce" identifier="ce" declaration="false"/>
                          <arguments xsi:type="dom:InfixExpression" operator="+">
                            <leftOperand xsi:type="dom:StringLiteral" escapedValue="&quot;Could not create generated non-Java file &quot;"/>
                            <rightOperand xsi:type="dom:MethodInvocation">
                              <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                              <name fullyQualifiedName="getName" identifier="getName" declaration="false"/>
                            </rightOperand>
                          </arguments>
                          <expression xsi:type="dom:SimpleName" fullyQualifiedName="Apt6Plugin" identifier="Apt6Plugin" declaration="false"/>
                          <name fullyQualifiedName="log" identifier="log" declaration="false"/>
                        </expression>
                      </statements>
                      <statements xsi:type="dom:VariableDeclarationStatement">
                        <fragments extraDimensions="0">
                          <initializer xsi:type="dom:ClassInstanceCreation">
                            <type xsi:type="dom:SimpleType">
                              <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                            </type>
                          </initializer>
                          <name fullyQualifiedName="ioe" identifier="ioe" declaration="true"/>
                        </fragments>
                        <type xsi:type="dom:SimpleType">
                          <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                        </type>
                      </statements>
                      <statements xsi:type="dom:ExpressionStatement">
                        <expression xsi:type="dom:MethodInvocation">
                          <arguments xsi:type="dom:SimpleName" fullyQualifiedName="ce" identifier="ce" declaration="false"/>
                          <expression xsi:type="dom:SimpleName" fullyQualifiedName="ioe" identifier="ioe" declaration="false"/>
                          <name fullyQualifiedName="initCause" identifier="initCause" declaration="false"/>
                        </expression>
                      </statements>
                      <statements xsi:type="dom:ThrowStatement">
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="ioe" identifier="ioe" declaration="false"/>
                      </statements>
                    </elseStatement>
                    <expression xsi:type="dom:MethodInvocation">
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                      <name fullyQualifiedName="exists" identifier="exists" declaration="false"/>
                    </expression>
                    <thenStatement xsi:type="dom:Block"/>
                  </statements>
                </body>
                <exception extraDimensions="0" varargs="false">
                  <name fullyQualifiedName="ce" identifier="ce" declaration="true"/>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
                  </type>
                </exception>
              </catchClauses>
              <body>
                <statements xsi:type="dom:ExpressionStatement">
                  <expression xsi:type="dom:MethodInvocation">
                    <arguments xsi:type="dom:MethodInvocation">
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                      <name fullyQualifiedName="getParent" identifier="getParent" declaration="false"/>
                    </arguments>
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="FileSystemUtil" identifier="FileSystemUtil" declaration="false"/>
                    <name fullyQualifiedName="makeDerivedParentFolders" identifier="makeDerivedParentFolders" declaration="false"/>
                  </expression>
                </statements>
                <statements xsi:type="dom:IfStatement">
                  <elseStatement xsi:type="dom:Block">
                    <statements xsi:type="dom:ExpressionStatement">
                      <expression xsi:type="dom:MethodInvocation">
                        <arguments xsi:type="dom:SimpleName" fullyQualifiedName="toSave" identifier="toSave" declaration="false"/>
                        <arguments xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                        <arguments xsi:type="dom:BooleanLiteral" booleanValue="false"/>
                        <arguments xsi:type="dom:NullLiteral"/>
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                        <name fullyQualifiedName="setContents" identifier="setContents" declaration="false"/>
                      </expression>
                    </statements>
                  </elseStatement>
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="create" identifier="create" declaration="false"/>
                  <thenStatement xsi:type="dom:Block">
                    <statements xsi:type="dom:ExpressionStatement">
                      <expression xsi:type="dom:MethodInvocation">
                        <arguments xsi:type="dom:SimpleName" fullyQualifiedName="toSave" identifier="toSave" declaration="false"/>
                        <arguments xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                        <arguments xsi:type="dom:NullLiteral"/>
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                        <name fullyQualifiedName="create" identifier="create" declaration="false"/>
                      </expression>
                    </statements>
                    <statements xsi:type="dom:ExpressionStatement">
                      <expression xsi:type="dom:MethodInvocation">
                        <arguments xsi:type="dom:BooleanLiteral" booleanValue="true"/>
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                        <name fullyQualifiedName="setDerived" identifier="setDerived" declaration="false"/>
                      </expression>
                    </statements>
                  </thenStatement>
                </statements>
              </body>
            </statements>
          </body>
          <name fullyQualifiedName="saveToDisk" identifier="saveToDisk" declaration="true"/>
          <returnType xsi:type="dom:PrimitiveType" code="void"/>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="toSave" identifier="toSave" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="create" identifier="create" declaration="true"/>
            <type xsi:type="dom:PrimitiveType" code="boolean"/>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <name fullyQualifiedName="IdeNonSourceOutputStream" identifier="IdeNonSourceOutputStream" declaration="true"/>
        <superclassType xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="ByteArrayOutputStream" identifier="ByteArrayOutputStream" declaration="false"/>
        </superclassType>
      </types>
    </ast>
  </compilationUnits>
  <compilationUnits elementName="IdeOutputFileObject.java">
    <imports elementName="java.io.IOException" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.InputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.Reader" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.tools.FileObject" isOnDemand="false" isStatic="false"/>
    <types elementName="IdeOutputFileObject" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeOutputFileObject" fullyQualifiedParametrizedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeOutputFileObject">
      <methods elementName="delete" returnType="Z" isConstructor="false" isMainMethod="false"/>
      <methods elementName="getCharContent" returnType="QCharSequence;" isConstructor="false" isMainMethod="false">
        <parameters name="ignoreEncodingErrors" type="Z"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="getLastModified" returnType="J" isConstructor="false" isMainMethod="false"/>
      <methods elementName="openInputStream" returnType="QInputStream;" isConstructor="false" isMainMethod="false">
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="openReader" returnType="QReader;" isConstructor="false" isMainMethod="false">
        <parameters name="ignoreEncodingErrors" type="Z"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
    </types>
    <ast>
      <package>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Copyright (c) 2007 BEA Systems, Inc. "/>
            <fragments xsi:type="dom:TextElement" text="All rights reserved. This program and the accompanying materials"/>
            <fragments xsi:type="dom:TextElement" text="are made available under the terms of the Eclipse Public License v1.0"/>
            <fragments xsi:type="dom:TextElement" text="which accompanies this distribution, and is available at"/>
            <fragments xsi:type="dom:TextElement" text="http://www.eclipse.org/legal/epl-v10.html"/>
            <fragments xsi:type="dom:TextElement" text="Contributors:"/>
            <fragments xsi:type="dom:TextElement" text="wharley@bea.com - initial API and implementation"/>
          </tags>
        </javadoc>
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer">
          <name fullyQualifiedName="filer" identifier="filer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
              <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                  <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </package>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.IOException">
          <name fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.InputStream">
          <name fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.Reader">
          <name fullyQualifiedName="Reader" identifier="Reader" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.FileObject">
          <name fullyQualifiedName="FileObject" identifier="FileObject" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools">
            <name fullyQualifiedName="tools" identifier="tools" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <types xsi:type="dom:TypeDeclaration" localTypeDeclaration="false" memberTypeDeclaration="false" packageMemberTypeDeclaration="true" interface="false">
        <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
        <modifiers xsi:type="dom:Modifier" abstract="true" final="false" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Deleting a file is not permitted from within an annotation processor&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalStateException" identifier="IllegalStateException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="delete" identifier="delete" declaration="true"/>
          <returnType xsi:type="dom:PrimitiveType" code="boolean"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Generated files are write-only&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalStateException" identifier="IllegalStateException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getCharContent" identifier="getCharContent" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
          </returnType>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="ignoreEncodingErrors" identifier="ignoreEncodingErrors" declaration="true"/>
            <type xsi:type="dom:PrimitiveType" code="boolean"/>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Not yet implemented&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="UnsupportedOperationException" identifier="UnsupportedOperationException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getLastModified" identifier="getLastModified" declaration="true"/>
          <returnType xsi:type="dom:PrimitiveType" code="long"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Opening an input stream on a generated file is not permitted&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalStateException" identifier="IllegalStateException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="openInputStream" identifier="openInputStream" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
          </returnType>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Opening a reader on a generated file is not permitted&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalStateException" identifier="IllegalStateException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="openReader" identifier="openReader" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="Reader" identifier="Reader" declaration="false"/>
          </returnType>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="ignoreEncodingErrors" identifier="ignoreEncodingErrors" declaration="true"/>
            <type xsi:type="dom:PrimitiveType" code="boolean"/>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <name fullyQualifiedName="IdeOutputFileObject" identifier="IdeOutputFileObject" declaration="true"/>
        <superInterfaceTypes xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="FileObject" identifier="FileObject" declaration="false"/>
        </superInterfaceTypes>
      </types>
    </ast>
  </compilationUnits>
  <compilationUnits elementName="IdeFilerImpl.java">
    <imports elementName="java.io.File" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.IOException" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.util.HashSet" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.util.Set" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.annotation.processing.Filer" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.lang.model.element.Element" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.tools.FileObject" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.tools.JavaFileObject" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.tools.StandardLocation" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.tools.JavaFileManager.Location" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.resources.IFile" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.resources.IResource" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.resources.IWorkspace" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.runtime.CoreException" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.runtime.IPath" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.runtime.IStatus" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.apt.core.internal.generatedfile.GeneratedSourceFolderManager" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.core.JavaModelException" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.internal.apt.pluggable.core.Apt6Plugin" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl" isOnDemand="false" isStatic="false"/>
    <types elementName="IdeFilerImpl" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeFilerImpl" fullyQualifiedParametrizedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeFilerImpl">
      <fields elementName="_env" isEnumConstant="false" typeSignature="QIdeProcessingEnvImpl;" isVolatile="false" isTransient="false"/>
      <methods elementName="IdeFilerImpl" returnType="V" isConstructor="true" isMainMethod="false">
        <parameters name="dispatchManager" type="QIdeAnnotationProcessorManager;"/>
        <parameters name="env" type="QIdeProcessingEnvImpl;"/>
      </methods>
      <methods elementName="createClassFile" returnType="QJavaFileObject;" isConstructor="false" isMainMethod="false">
        <parameters name="name" type="QCharSequence;"/>
        <parameters name="originatingElements" type="[QElement;"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="createResource" returnType="QFileObject;" isConstructor="false" isMainMethod="false">
        <parameters name="location" type="QLocation;"/>
        <parameters name="pkg" type="QCharSequence;"/>
        <parameters name="relativeName" type="QCharSequence;"/>
        <parameters name="originatingElements" type="[QElement;"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="createSourceFile" returnType="QJavaFileObject;" isConstructor="false" isMainMethod="false">
        <parameters name="name" type="QCharSequence;"/>
        <parameters name="originatingElements" type="[QElement;"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="getResource" returnType="QFileObject;" isConstructor="false" isMainMethod="false">
        <parameters name="location" type="QLocation;"/>
        <parameters name="pkg" type="QCharSequence;"/>
        <parameters name="relativeName" type="QCharSequence;"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="getFileFromOutputLocation" returnType="QIFile;" isConstructor="false" isMainMethod="false">
        <parameters name="loc" type="QLocation;"/>
        <parameters name="pkg" type="QCharSequence;"/>
        <parameters name="relPath" type="QCharSequence;"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="validatePath" returnType="V" isConstructor="false" isMainMethod="false">
        <parameters name="file" type="QIFile;"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
    </types>
    <ast>
      <package>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Copyright (c) 2007, 2008 BEA Systems, Inc. "/>
            <fragments xsi:type="dom:TextElement" text="All rights reserved. This program and the accompanying materials"/>
            <fragments xsi:type="dom:TextElement" text="are made available under the terms of the Eclipse Public License v1.0"/>
            <fragments xsi:type="dom:TextElement" text="which accompanies this distribution, and is available at"/>
            <fragments xsi:type="dom:TextElement" text="http://www.eclipse.org/legal/epl-v10.html"/>
            <fragments xsi:type="dom:TextElement" text="Contributors:"/>
            <fragments xsi:type="dom:TextElement" text="wharley@bea.com - initial API and implementation"/>
          </tags>
        </javadoc>
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer">
          <name fullyQualifiedName="filer" identifier="filer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
              <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                  <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </package>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.File">
          <name fullyQualifiedName="File" identifier="File" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.IOException">
          <name fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.util.HashSet">
          <name fullyQualifiedName="HashSet" identifier="HashSet" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.util">
            <name fullyQualifiedName="util" identifier="util" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.util.Set">
          <name fullyQualifiedName="Set" identifier="Set" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.util">
            <name fullyQualifiedName="util" identifier="util" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.annotation.processing.Filer">
          <name fullyQualifiedName="Filer" identifier="Filer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.annotation.processing">
            <name fullyQualifiedName="processing" identifier="processing" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.annotation">
              <name fullyQualifiedName="annotation" identifier="annotation" declaration="false"/>
              <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model.element.Element">
          <name fullyQualifiedName="Element" identifier="Element" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model.element">
            <name fullyQualifiedName="element" identifier="element" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model">
              <name fullyQualifiedName="model" identifier="model" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang">
                <name fullyQualifiedName="lang" identifier="lang" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.FileObject">
          <name fullyQualifiedName="FileObject" identifier="FileObject" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools">
            <name fullyQualifiedName="tools" identifier="tools" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.JavaFileObject">
          <name fullyQualifiedName="JavaFileObject" identifier="JavaFileObject" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools">
            <name fullyQualifiedName="tools" identifier="tools" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.StandardLocation">
          <name fullyQualifiedName="StandardLocation" identifier="StandardLocation" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools">
            <name fullyQualifiedName="tools" identifier="tools" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.JavaFileManager.Location">
          <name fullyQualifiedName="Location" identifier="Location" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.JavaFileManager">
            <name fullyQualifiedName="JavaFileManager" identifier="JavaFileManager" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools">
              <name fullyQualifiedName="tools" identifier="tools" declaration="false"/>
              <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources.IFile">
          <name fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources">
            <name fullyQualifiedName="resources" identifier="resources" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources.IResource">
          <name fullyQualifiedName="IResource" identifier="IResource" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources">
            <name fullyQualifiedName="resources" identifier="resources" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources.IWorkspace">
          <name fullyQualifiedName="IWorkspace" identifier="IWorkspace" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources">
            <name fullyQualifiedName="resources" identifier="resources" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime.CoreException">
          <name fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime">
            <name fullyQualifiedName="runtime" identifier="runtime" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime.IPath">
          <name fullyQualifiedName="IPath" identifier="IPath" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime">
            <name fullyQualifiedName="runtime" identifier="runtime" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime.IStatus">
          <name fullyQualifiedName="IStatus" identifier="IStatus" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime">
            <name fullyQualifiedName="runtime" identifier="runtime" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal.generatedfile.GeneratedSourceFolderManager">
          <name fullyQualifiedName="GeneratedSourceFolderManager" identifier="GeneratedSourceFolderManager" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal.generatedfile">
            <name fullyQualifiedName="generatedfile" identifier="generatedfile" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core.internal">
              <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt.core">
                <name fullyQualifiedName="core" identifier="core" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.core.JavaModelException">
          <name fullyQualifiedName="JavaModelException" identifier="JavaModelException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
              <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.Apt6Plugin">
          <name fullyQualifiedName="Apt6Plugin" identifier="Apt6Plugin" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
              <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                  <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager">
          <name fullyQualifiedName="IdeAnnotationProcessorManager" identifier="IdeAnnotationProcessorManager" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch">
            <name fullyQualifiedName="dispatch" identifier="dispatch" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
                <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                    <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                      <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                      <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                        <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                        <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                      </qualifier>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl">
          <name fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.dispatch">
            <name fullyQualifiedName="dispatch" identifier="dispatch" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
                <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                    <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                      <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                      <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                        <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                        <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                      </qualifier>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <types xsi:type="dom:TypeDeclaration" localTypeDeclaration="false" memberTypeDeclaration="false" packageMemberTypeDeclaration="true" interface="false">
        <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Implementation of the Filer interface that is used in IDE mode."/>
          </tags>
          <tags tagName="@see" nested="false">
            <fragments xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.compiler.apt.dispatch.BatchFilerImpl">
              <name fullyQualifiedName="BatchFilerImpl" identifier="BatchFilerImpl" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.compiler.apt.dispatch">
                <name fullyQualifiedName="dispatch" identifier="dispatch" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.compiler.apt">
                  <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.compiler">
                    <name fullyQualifiedName="compiler" identifier="compiler" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                      <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                      <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                        <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                        <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                          <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                          <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                        </qualifier>
                      </qualifier>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </fragments>
          </tags>
          <tags tagName="@since" nested="false">
            <fragments xsi:type="dom:TextElement" text=" 3.3"/>
          </tags>
        </javadoc>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_env" identifier="_env" declaration="true"/>
          </fragments>
          <type xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="true" varargs="false">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="env" identifier="env" declaration="false"/>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="IdeFilerImpl" identifier="IdeFilerImpl" declaration="false"/>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="dispatchManager" identifier="dispatchManager" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeAnnotationProcessorManager" identifier="IdeAnnotationProcessorManager" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="env" identifier="env" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeProcessingEnvImpl" identifier="IdeProcessingEnvImpl" declaration="false"/>
            </type>
          </parameters>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="true">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Creating class files is not yet implemented&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="UnsupportedOperationException" identifier="UnsupportedOperationException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="createClassFile" identifier="createClassFile" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="JavaFileObject" identifier="JavaFileObject" declaration="false"/>
          </returnType>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="name" identifier="name" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="true">
            <name fullyQualifiedName="originatingElements" identifier="originatingElements" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Element" identifier="Element" declaration="false"/>
            </type>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="true">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:IfStatement">
              <expression xsi:type="dom:InfixExpression" operator="==">
                <leftOperand xsi:type="dom:NullLiteral"/>
                <rightOperand xsi:type="dom:SimpleName" fullyQualifiedName="location" identifier="location" declaration="false"/>
              </expression>
              <thenStatement xsi:type="dom:Block">
                <statements xsi:type="dom:ThrowStatement">
                  <expression xsi:type="dom:ClassInstanceCreation">
                    <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Location is null&quot;"/>
                    <type xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalArgumentException" identifier="IllegalArgumentException" declaration="false"/>
                    </type>
                  </expression>
                </statements>
              </thenStatement>
            </statements>
            <statements xsi:type="dom:IfStatement">
              <expression xsi:type="dom:PrefixExpression" operator="!">
                <operand xsi:type="dom:MethodInvocation">
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="location" identifier="location" declaration="false"/>
                  <name fullyQualifiedName="isOutputLocation" identifier="isOutputLocation" declaration="false"/>
                </operand>
              </expression>
              <thenStatement xsi:type="dom:Block">
                <statements xsi:type="dom:ThrowStatement">
                  <expression xsi:type="dom:ClassInstanceCreation">
                    <arguments xsi:type="dom:InfixExpression" operator="+">
                      <extendedOperands xsi:type="dom:StringLiteral" escapedValue="&quot; is not an output location&quot;"/>
                      <leftOperand xsi:type="dom:StringLiteral" escapedValue="&quot;Location &quot;"/>
                      <rightOperand xsi:type="dom:MethodInvocation">
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="location" identifier="location" declaration="false"/>
                        <name fullyQualifiedName="getName" identifier="getName" declaration="false"/>
                      </rightOperand>
                    </arguments>
                    <type xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalArgumentException" identifier="IllegalArgumentException" declaration="false"/>
                    </type>
                  </expression>
                </statements>
              </thenStatement>
            </statements>
            <statements xsi:type="dom:IfStatement">
              <expression xsi:type="dom:InfixExpression" operator="==">
                <leftOperand xsi:type="dom:NullLiteral"/>
                <rightOperand xsi:type="dom:SimpleName" fullyQualifiedName="pkg" identifier="pkg" declaration="false"/>
              </expression>
              <thenStatement xsi:type="dom:Block">
                <statements xsi:type="dom:ThrowStatement">
                  <expression xsi:type="dom:ClassInstanceCreation">
                    <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Package is null&quot;"/>
                    <type xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalArgumentException" identifier="IllegalArgumentException" declaration="false"/>
                    </type>
                  </expression>
                </statements>
              </thenStatement>
            </statements>
            <statements xsi:type="dom:IfStatement">
              <expression xsi:type="dom:InfixExpression" operator="==">
                <leftOperand xsi:type="dom:NullLiteral"/>
                <rightOperand xsi:type="dom:SimpleName" fullyQualifiedName="relativeName" identifier="relativeName" declaration="false"/>
              </expression>
              <thenStatement xsi:type="dom:Block">
                <statements xsi:type="dom:ThrowStatement">
                  <expression xsi:type="dom:ClassInstanceCreation">
                    <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Relative name is null&quot;"/>
                    <type xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalArgumentException" identifier="IllegalArgumentException" declaration="false"/>
                    </type>
                  </expression>
                </statements>
              </thenStatement>
            </statements>
            <statements xsi:type="dom:IfStatement">
              <expression xsi:type="dom:InfixExpression" operator="==">
                <leftOperand xsi:type="dom:MethodInvocation">
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="relativeName" identifier="relativeName" declaration="false"/>
                  <name fullyQualifiedName="length" identifier="length" declaration="false"/>
                </leftOperand>
                <rightOperand xsi:type="dom:NumberLiteral" token="0"/>
              </expression>
              <thenStatement xsi:type="dom:Block">
                <statements xsi:type="dom:ThrowStatement">
                  <expression xsi:type="dom:ClassInstanceCreation">
                    <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Relative name is zero length&quot;"/>
                    <type xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalArgumentException" identifier="IllegalArgumentException" declaration="false"/>
                    </type>
                  </expression>
                </statements>
              </thenStatement>
            </statements>
            <statements xsi:type="dom:VariableDeclarationStatement">
              <fragments extraDimensions="0">
                <initializer xsi:type="dom:MethodInvocation">
                  <arguments xsi:type="dom:SimpleName" fullyQualifiedName="location" identifier="location" declaration="false"/>
                  <arguments xsi:type="dom:SimpleName" fullyQualifiedName="pkg" identifier="pkg" declaration="false"/>
                  <arguments xsi:type="dom:SimpleName" fullyQualifiedName="relativeName" identifier="relativeName" declaration="false"/>
                  <name fullyQualifiedName="getFileFromOutputLocation" identifier="getFileFromOutputLocation" declaration="false"/>
                </initializer>
                <name fullyQualifiedName="file" identifier="file" declaration="true"/>
              </fragments>
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
              </type>
            </statements>
            <statements xsi:type="dom:VariableDeclarationStatement">
              <fragments extraDimensions="0">
                <initializer xsi:type="dom:ClassInstanceCreation">
                  <arguments xsi:type="dom:QualifiedName" fullyQualifiedName="originatingElements.length">
                    <name fullyQualifiedName="length" identifier="length" declaration="false"/>
                    <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="originatingElements" identifier="originatingElements" declaration="false"/>
                  </arguments>
                  <type xsi:type="dom:ParameterizedType">
                    <type xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="HashSet" identifier="HashSet" declaration="false"/>
                    </type>
                    <typeArguments xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
                    </typeArguments>
                  </type>
                </initializer>
                <name fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="true"/>
              </fragments>
              <type xsi:type="dom:ParameterizedType">
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="Set" identifier="Set" declaration="false"/>
                </type>
                <typeArguments xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
                </typeArguments>
              </type>
            </statements>
            <statements xsi:type="dom:EnhancedForStatement">
              <body xsi:type="dom:Block">
                <statements xsi:type="dom:VariableDeclarationStatement">
                  <fragments extraDimensions="0">
                    <initializer xsi:type="dom:MethodInvocation">
                      <arguments xsi:type="dom:SimpleName" fullyQualifiedName="elem" identifier="elem" declaration="false"/>
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                      <name fullyQualifiedName="getEnclosingIFile" identifier="getEnclosingIFile" declaration="false"/>
                    </initializer>
                    <name fullyQualifiedName="enclosing" identifier="enclosing" declaration="true"/>
                  </fragments>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
                  </type>
                </statements>
                <statements xsi:type="dom:IfStatement">
                  <expression xsi:type="dom:InfixExpression" operator="!=">
                    <leftOperand xsi:type="dom:NullLiteral"/>
                    <rightOperand xsi:type="dom:SimpleName" fullyQualifiedName="enclosing" identifier="enclosing" declaration="false"/>
                  </expression>
                  <thenStatement xsi:type="dom:Block">
                    <statements xsi:type="dom:ExpressionStatement">
                      <expression xsi:type="dom:MethodInvocation">
                        <arguments xsi:type="dom:SimpleName" fullyQualifiedName="enclosing" identifier="enclosing" declaration="false"/>
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="false"/>
                        <name fullyQualifiedName="add" identifier="add" declaration="false"/>
                      </expression>
                    </statements>
                  </thenStatement>
                </statements>
              </body>
              <expression xsi:type="dom:SimpleName" fullyQualifiedName="originatingElements" identifier="originatingElements" declaration="false"/>
              <parameter extraDimensions="0" varargs="false">
                <name fullyQualifiedName="elem" identifier="elem" declaration="true"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="Element" identifier="Element" declaration="false"/>
                </type>
              </parameter>
            </statements>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="file" identifier="file" declaration="false"/>
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="false"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeOutputNonSourceFileObject" identifier="IdeOutputNonSourceFileObject" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="createResource" identifier="createResource" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="FileObject" identifier="FileObject" declaration="false"/>
          </returnType>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="location" identifier="location" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Location" identifier="Location" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="pkg" identifier="pkg" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="relativeName" identifier="relativeName" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="true">
            <name fullyQualifiedName="originatingElements" identifier="originatingElements" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Element" identifier="Element" declaration="false"/>
            </type>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="true">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <javadoc>
            <tags tagName="@param" nested="false">
              <fragments xsi:type="dom:SimpleName" fullyQualifiedName="originatingElements" identifier="originatingElements" declaration="false"/>
              <fragments xsi:type="dom:TextElement" text=" should all be source types; binary types (ie elements in jar files)"/>
              <fragments xsi:type="dom:TextElement" text="will be ignored."/>
            </tags>
            <tags tagName="@see" nested="false">
              <fragments xsi:type="dom:MethodRef">
                <name fullyQualifiedName="createSourceFile" identifier="createSourceFile" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.annotation.processing.Filer">
                  <name fullyQualifiedName="Filer" identifier="Filer" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.annotation.processing">
                    <name fullyQualifiedName="processing" identifier="processing" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.annotation">
                      <name fullyQualifiedName="annotation" identifier="annotation" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
                <parameters varargs="false">
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.lang.CharSequence">
                      <name fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
                      <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.lang">
                        <name fullyQualifiedName="lang" identifier="lang" declaration="false"/>
                        <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
                      </qualifier>
                    </name>
                  </type>
                </parameters>
                <parameters varargs="false">
                  <type xsi:type="dom:ArrayType" dimensions="1">
                    <componentType xsi:type="dom:SimpleType">
                      <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model.element.Element">
                        <name fullyQualifiedName="Element" identifier="Element" declaration="false"/>
                        <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model.element">
                          <name fullyQualifiedName="element" identifier="element" declaration="false"/>
                          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang.model">
                            <name fullyQualifiedName="model" identifier="model" declaration="false"/>
                            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.lang">
                              <name fullyQualifiedName="lang" identifier="lang" declaration="false"/>
                              <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
                            </qualifier>
                          </qualifier>
                        </qualifier>
                      </name>
                    </componentType>
                  </type>
                </parameters>
              </fragments>
            </tags>
          </javadoc>
          <body>
            <statements xsi:type="dom:IfStatement">
              <expression xsi:type="dom:InfixExpression" operator="==">
                <leftOperand xsi:type="dom:NullLiteral"/>
                <rightOperand xsi:type="dom:SimpleName" fullyQualifiedName="name" identifier="name" declaration="false"/>
              </expression>
              <thenStatement xsi:type="dom:Block">
                <statements xsi:type="dom:ThrowStatement">
                  <expression xsi:type="dom:ClassInstanceCreation">
                    <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Name is null&quot;"/>
                    <type xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalArgumentException" identifier="IllegalArgumentException" declaration="false"/>
                    </type>
                  </expression>
                </statements>
              </thenStatement>
            </statements>
            <statements xsi:type="dom:VariableDeclarationStatement">
              <fragments extraDimensions="0">
                <initializer xsi:type="dom:ClassInstanceCreation">
                  <arguments xsi:type="dom:QualifiedName" fullyQualifiedName="originatingElements.length">
                    <name fullyQualifiedName="length" identifier="length" declaration="false"/>
                    <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="originatingElements" identifier="originatingElements" declaration="false"/>
                  </arguments>
                  <type xsi:type="dom:ParameterizedType">
                    <type xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="HashSet" identifier="HashSet" declaration="false"/>
                    </type>
                    <typeArguments xsi:type="dom:SimpleType">
                      <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
                    </typeArguments>
                  </type>
                </initializer>
                <name fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="true"/>
              </fragments>
              <type xsi:type="dom:ParameterizedType">
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="Set" identifier="Set" declaration="false"/>
                </type>
                <typeArguments xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
                </typeArguments>
              </type>
            </statements>
            <statements xsi:type="dom:EnhancedForStatement">
              <body xsi:type="dom:Block">
                <statements xsi:type="dom:VariableDeclarationStatement">
                  <fragments extraDimensions="0">
                    <initializer xsi:type="dom:MethodInvocation">
                      <arguments xsi:type="dom:SimpleName" fullyQualifiedName="elem" identifier="elem" declaration="false"/>
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                      <name fullyQualifiedName="getEnclosingIFile" identifier="getEnclosingIFile" declaration="false"/>
                    </initializer>
                    <name fullyQualifiedName="enclosing" identifier="enclosing" declaration="true"/>
                  </fragments>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
                  </type>
                </statements>
                <statements xsi:type="dom:IfStatement">
                  <expression xsi:type="dom:InfixExpression" operator="!=">
                    <leftOperand xsi:type="dom:NullLiteral"/>
                    <rightOperand xsi:type="dom:SimpleName" fullyQualifiedName="enclosing" identifier="enclosing" declaration="false"/>
                  </expression>
                  <thenStatement xsi:type="dom:Block">
                    <statements xsi:type="dom:ExpressionStatement">
                      <expression xsi:type="dom:MethodInvocation">
                        <arguments xsi:type="dom:SimpleName" fullyQualifiedName="enclosing" identifier="enclosing" declaration="false"/>
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="false"/>
                        <name fullyQualifiedName="add" identifier="add" declaration="false"/>
                      </expression>
                    </statements>
                  </thenStatement>
                </statements>
              </body>
              <expression xsi:type="dom:SimpleName" fullyQualifiedName="originatingElements" identifier="originatingElements" declaration="false"/>
              <parameter extraDimensions="0" varargs="false">
                <name fullyQualifiedName="elem" identifier="elem" declaration="true"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="Element" identifier="Element" declaration="false"/>
                </type>
              </parameter>
            </statements>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="name" identifier="name" declaration="false"/>
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="parentFiles" identifier="parentFiles" declaration="false"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeOutputJavaFileObject" identifier="IdeOutputJavaFileObject" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="createSourceFile" identifier="createSourceFile" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="JavaFileObject" identifier="JavaFileObject" declaration="false"/>
          </returnType>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="name" identifier="name" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="true">
            <name fullyQualifiedName="originatingElements" identifier="originatingElements" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Element" identifier="Element" declaration="false"/>
            </type>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:VariableDeclarationStatement">
              <fragments extraDimensions="0">
                <initializer xsi:type="dom:MethodInvocation">
                  <arguments xsi:type="dom:SimpleName" fullyQualifiedName="location" identifier="location" declaration="false"/>
                  <arguments xsi:type="dom:SimpleName" fullyQualifiedName="pkg" identifier="pkg" declaration="false"/>
                  <arguments xsi:type="dom:SimpleName" fullyQualifiedName="relativeName" identifier="relativeName" declaration="false"/>
                  <name fullyQualifiedName="getFileFromOutputLocation" identifier="getFileFromOutputLocation" declaration="false"/>
                </initializer>
                <name fullyQualifiedName="file" identifier="file" declaration="true"/>
              </fragments>
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
              </type>
            </statements>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="file" identifier="file" declaration="false"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IdeInputFileObject" identifier="IdeInputFileObject" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getResource" identifier="getResource" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="FileObject" identifier="FileObject" declaration="false"/>
          </returnType>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="location" identifier="location" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Location" identifier="Location" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="pkg" identifier="pkg" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="relativeName" identifier="relativeName" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
            </type>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="true" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <javadoc>
            <tags nested="false">
              <fragments xsi:type="dom:TextElement" text="Return a project-relative path.  This does not create the file nor its parent directories,"/>
              <fragments xsi:type="dom:TextElement" text="but it does validate the path."/>
            </tags>
            <tags tagName="@param" nested="false">
              <fragments xsi:type="dom:SimpleName" fullyQualifiedName="pkg" identifier="pkg" declaration="false"/>
              <fragments xsi:type="dom:TextElement" text=" must be non-null but can be empty."/>
            </tags>
            <tags tagName="@param" nested="false">
              <fragments xsi:type="dom:SimpleName" fullyQualifiedName="relPath" identifier="relPath" declaration="false"/>
              <fragments xsi:type="dom:TextElement" text=" must be non-null and non-empty."/>
            </tags>
            <tags tagName="@throws" nested="false">
              <fragments xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
              <fragments xsi:type="dom:TextElement" text=" if the path is not valid."/>
            </tags>
          </javadoc>
          <body>
            <statements xsi:type="dom:VariableDeclarationStatement">
              <fragments extraDimensions="0">
                <initializer xsi:type="dom:MethodInvocation">
                  <expression xsi:type="dom:MethodInvocation">
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                    <name fullyQualifiedName="getAptProject" identifier="getAptProject" declaration="false"/>
                  </expression>
                  <name fullyQualifiedName="getGeneratedSourceFolderManager" identifier="getGeneratedSourceFolderManager" declaration="false"/>
                </initializer>
                <name fullyQualifiedName="gsfm" identifier="gsfm" declaration="true"/>
              </fragments>
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="GeneratedSourceFolderManager" identifier="GeneratedSourceFolderManager" declaration="false"/>
              </type>
            </statements>
            <statements xsi:type="dom:VariableDeclarationStatement">
              <fragments extraDimensions="0">
                <initializer xsi:type="dom:NullLiteral"/>
                <name fullyQualifiedName="path" identifier="path" declaration="true"/>
              </fragments>
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="IPath" identifier="IPath" declaration="false"/>
              </type>
            </statements>
            <statements xsi:type="dom:IfStatement">
              <elseStatement xsi:type="dom:IfStatement">
                <elseStatement xsi:type="dom:Block">
                  <statements xsi:type="dom:ThrowStatement">
                    <expression xsi:type="dom:ClassInstanceCreation">
                      <arguments xsi:type="dom:InfixExpression" operator="+">
                        <leftOperand xsi:type="dom:StringLiteral" escapedValue="&quot;Unsupported location: &quot;"/>
                        <rightOperand xsi:type="dom:SimpleName" fullyQualifiedName="loc" identifier="loc" declaration="false"/>
                      </arguments>
                      <type xsi:type="dom:SimpleType">
                        <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalArgumentException" identifier="IllegalArgumentException" declaration="false"/>
                      </type>
                    </expression>
                  </statements>
                </elseStatement>
                <expression xsi:type="dom:InfixExpression" operator="==">
                  <leftOperand xsi:type="dom:SimpleName" fullyQualifiedName="loc" identifier="loc" declaration="false"/>
                  <rightOperand xsi:type="dom:QualifiedName" fullyQualifiedName="StandardLocation.SOURCE_OUTPUT">
                    <name fullyQualifiedName="SOURCE_OUTPUT" identifier="SOURCE_OUTPUT" declaration="false"/>
                    <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="StandardLocation" identifier="StandardLocation" declaration="false"/>
                  </rightOperand>
                </expression>
                <thenStatement xsi:type="dom:Block">
                  <statements xsi:type="dom:ExpressionStatement">
                    <expression xsi:type="dom:Assignment" operator="=">
                      <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="path" identifier="path" declaration="false"/>
                      <rightHandSide xsi:type="dom:MethodInvocation">
                        <expression xsi:type="dom:MethodInvocation">
                          <expression xsi:type="dom:SimpleName" fullyQualifiedName="gsfm" identifier="gsfm" declaration="false"/>
                          <name fullyQualifiedName="getFolder" identifier="getFolder" declaration="false"/>
                        </expression>
                        <name fullyQualifiedName="getProjectRelativePath" identifier="getProjectRelativePath" declaration="false"/>
                      </rightHandSide>
                    </expression>
                  </statements>
                </thenStatement>
              </elseStatement>
              <expression xsi:type="dom:InfixExpression" operator="==">
                <leftOperand xsi:type="dom:SimpleName" fullyQualifiedName="loc" identifier="loc" declaration="false"/>
                <rightOperand xsi:type="dom:QualifiedName" fullyQualifiedName="StandardLocation.CLASS_OUTPUT">
                  <name fullyQualifiedName="CLASS_OUTPUT" identifier="CLASS_OUTPUT" declaration="false"/>
                  <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="StandardLocation" identifier="StandardLocation" declaration="false"/>
                </rightOperand>
              </expression>
              <thenStatement xsi:type="dom:Block">
                <statements xsi:type="dom:TryStatement">
                  <catchClauses>
                    <body>
                      <statements xsi:type="dom:ExpressionStatement">
                        <expression xsi:type="dom:MethodInvocation">
                          <arguments xsi:type="dom:SimpleName" fullyQualifiedName="e" identifier="e" declaration="false"/>
                          <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Failure getting the binary output location&quot;"/>
                          <expression xsi:type="dom:SimpleName" fullyQualifiedName="Apt6Plugin" identifier="Apt6Plugin" declaration="false"/>
                          <name fullyQualifiedName="log" identifier="log" declaration="false"/>
                        </expression>
                      </statements>
                      <statements xsi:type="dom:VariableDeclarationStatement">
                        <fragments extraDimensions="0">
                          <initializer xsi:type="dom:ClassInstanceCreation">
                            <type xsi:type="dom:SimpleType">
                              <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                            </type>
                          </initializer>
                          <name fullyQualifiedName="ioe" identifier="ioe" declaration="true"/>
                        </fragments>
                        <type xsi:type="dom:SimpleType">
                          <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                        </type>
                      </statements>
                      <statements xsi:type="dom:ExpressionStatement">
                        <expression xsi:type="dom:MethodInvocation">
                          <arguments xsi:type="dom:SimpleName" fullyQualifiedName="e" identifier="e" declaration="false"/>
                          <expression xsi:type="dom:SimpleName" fullyQualifiedName="ioe" identifier="ioe" declaration="false"/>
                          <name fullyQualifiedName="initCause" identifier="initCause" declaration="false"/>
                        </expression>
                      </statements>
                      <statements xsi:type="dom:ThrowStatement">
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="ioe" identifier="ioe" declaration="false"/>
                      </statements>
                    </body>
                    <exception extraDimensions="0" varargs="false">
                      <name fullyQualifiedName="e" identifier="e" declaration="true"/>
                      <type xsi:type="dom:SimpleType">
                        <name xsi:type="dom:SimpleName" fullyQualifiedName="JavaModelException" identifier="JavaModelException" declaration="false"/>
                      </type>
                    </exception>
                  </catchClauses>
                  <body>
                    <statements xsi:type="dom:ExpressionStatement">
                      <expression xsi:type="dom:Assignment" operator="=">
                        <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="path" identifier="path" declaration="false"/>
                        <rightHandSide xsi:type="dom:MethodInvocation">
                          <expression xsi:type="dom:SimpleName" fullyQualifiedName="gsfm" identifier="gsfm" declaration="false"/>
                          <name fullyQualifiedName="getBinaryOutputLocation" identifier="getBinaryOutputLocation" declaration="false"/>
                        </rightHandSide>
                      </expression>
                    </statements>
                  </body>
                </statements>
              </thenStatement>
            </statements>
            <statements xsi:type="dom:IfStatement">
              <expression xsi:type="dom:InfixExpression" operator=">">
                <leftOperand xsi:type="dom:MethodInvocation">
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="pkg" identifier="pkg" declaration="false"/>
                  <name fullyQualifiedName="length" identifier="length" declaration="false"/>
                </leftOperand>
                <rightOperand xsi:type="dom:NumberLiteral" token="0"/>
              </expression>
              <thenStatement xsi:type="dom:ExpressionStatement">
                <expression xsi:type="dom:Assignment" operator="=">
                  <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="path" identifier="path" declaration="false"/>
                  <rightHandSide xsi:type="dom:MethodInvocation">
                    <arguments xsi:type="dom:MethodInvocation">
                      <arguments xsi:type="dom:CharacterLiteral" escapedValue="'.'"/>
                      <arguments xsi:type="dom:QualifiedName" fullyQualifiedName="File.separatorChar">
                        <name fullyQualifiedName="separatorChar" identifier="separatorChar" declaration="false"/>
                        <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="File" identifier="File" declaration="false"/>
                      </arguments>
                      <expression xsi:type="dom:MethodInvocation">
                        <expression xsi:type="dom:SimpleName" fullyQualifiedName="pkg" identifier="pkg" declaration="false"/>
                        <name fullyQualifiedName="toString" identifier="toString" declaration="false"/>
                      </expression>
                      <name fullyQualifiedName="replace" identifier="replace" declaration="false"/>
                    </arguments>
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="path" identifier="path" declaration="false"/>
                    <name fullyQualifiedName="append" identifier="append" declaration="false"/>
                  </rightHandSide>
                </expression>
              </thenStatement>
            </statements>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="path" identifier="path" declaration="false"/>
                <rightHandSide xsi:type="dom:MethodInvocation">
                  <arguments xsi:type="dom:MethodInvocation">
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="relPath" identifier="relPath" declaration="false"/>
                    <name fullyQualifiedName="toString" identifier="toString" declaration="false"/>
                  </arguments>
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="path" identifier="path" declaration="false"/>
                  <name fullyQualifiedName="append" identifier="append" declaration="false"/>
                </rightHandSide>
              </expression>
            </statements>
            <statements xsi:type="dom:VariableDeclarationStatement">
              <fragments extraDimensions="0">
                <initializer xsi:type="dom:MethodInvocation">
                  <arguments xsi:type="dom:SimpleName" fullyQualifiedName="path" identifier="path" declaration="false"/>
                  <expression xsi:type="dom:MethodInvocation">
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                    <name fullyQualifiedName="getProject" identifier="getProject" declaration="false"/>
                  </expression>
                  <name fullyQualifiedName="getFile" identifier="getFile" declaration="false"/>
                </initializer>
                <name fullyQualifiedName="file" identifier="file" declaration="true"/>
              </fragments>
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
              </type>
            </statements>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:MethodInvocation">
                <arguments xsi:type="dom:SimpleName" fullyQualifiedName="file" identifier="file" declaration="false"/>
                <name fullyQualifiedName="validatePath" identifier="validatePath" declaration="false"/>
              </expression>
            </statements>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:SimpleName" fullyQualifiedName="file" identifier="file" declaration="false"/>
            </statements>
          </body>
          <name fullyQualifiedName="getFileFromOutputLocation" identifier="getFileFromOutputLocation" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
          </returnType>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="loc" identifier="loc" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="Location" identifier="Location" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="pkg" identifier="pkg" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
            </type>
          </parameters>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="relPath" identifier="relPath" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
            </type>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <javadoc>
            <tags nested="false">
              <fragments xsi:type="dom:TextElement" text="Validate that a path fits the rules for being created."/>
            </tags>
            <tags tagName="@see" nested="false">
              <fragments xsi:type="dom:MethodRef">
                <name fullyQualifiedName="validatePath" identifier="validatePath" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="IWorkspace" identifier="IWorkspace" declaration="false"/>
              </fragments>
            </tags>
            <tags tagName="@throws" nested="false">
              <fragments xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
            </tags>
          </javadoc>
          <body>
            <statements xsi:type="dom:VariableDeclarationStatement">
              <fragments extraDimensions="0">
                <initializer xsi:type="dom:MethodInvocation">
                  <arguments xsi:type="dom:MethodInvocation">
                    <expression xsi:type="dom:MethodInvocation">
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="file" identifier="file" declaration="false"/>
                      <name fullyQualifiedName="getFullPath" identifier="getFullPath" declaration="false"/>
                    </expression>
                    <name fullyQualifiedName="toOSString" identifier="toOSString" declaration="false"/>
                  </arguments>
                  <arguments xsi:type="dom:QualifiedName" fullyQualifiedName="IResource.FILE">
                    <name fullyQualifiedName="FILE" identifier="FILE" declaration="false"/>
                    <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="IResource" identifier="IResource" declaration="false"/>
                  </arguments>
                  <expression xsi:type="dom:MethodInvocation">
                    <expression xsi:type="dom:MethodInvocation">
                      <expression xsi:type="dom:SimpleName" fullyQualifiedName="_env" identifier="_env" declaration="false"/>
                      <name fullyQualifiedName="getProject" identifier="getProject" declaration="false"/>
                    </expression>
                    <name fullyQualifiedName="getWorkspace" identifier="getWorkspace" declaration="false"/>
                  </expression>
                  <name fullyQualifiedName="validatePath" identifier="validatePath" declaration="false"/>
                </initializer>
                <name fullyQualifiedName="status" identifier="status" declaration="true"/>
              </fragments>
              <type xsi:type="dom:SimpleType">
                <name xsi:type="dom:SimpleName" fullyQualifiedName="IStatus" identifier="IStatus" declaration="false"/>
              </type>
            </statements>
            <statements xsi:type="dom:IfStatement">
              <expression xsi:type="dom:PrefixExpression" operator="!">
                <operand xsi:type="dom:MethodInvocation">
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="status" identifier="status" declaration="false"/>
                  <name fullyQualifiedName="isOK" identifier="isOK" declaration="false"/>
                </operand>
              </expression>
              <thenStatement xsi:type="dom:Block">
                <statements xsi:type="dom:VariableDeclarationStatement">
                  <fragments extraDimensions="0">
                    <initializer xsi:type="dom:ClassInstanceCreation">
                      <arguments xsi:type="dom:SimpleName" fullyQualifiedName="status" identifier="status" declaration="false"/>
                      <type xsi:type="dom:SimpleType">
                        <name xsi:type="dom:SimpleName" fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
                      </type>
                    </initializer>
                    <name fullyQualifiedName="ce" identifier="ce" declaration="true"/>
                  </fragments>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
                  </type>
                </statements>
                <statements xsi:type="dom:VariableDeclarationStatement">
                  <fragments extraDimensions="0">
                    <initializer xsi:type="dom:ClassInstanceCreation">
                      <arguments xsi:type="dom:InfixExpression" operator="+">
                        <leftOperand xsi:type="dom:StringLiteral" escapedValue="&quot;Invalid path: &quot;"/>
                        <rightOperand xsi:type="dom:MethodInvocation">
                          <expression xsi:type="dom:SimpleName" fullyQualifiedName="file" identifier="file" declaration="false"/>
                          <name fullyQualifiedName="toString" identifier="toString" declaration="false"/>
                        </rightOperand>
                      </arguments>
                      <type xsi:type="dom:SimpleType">
                        <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                      </type>
                    </initializer>
                    <name fullyQualifiedName="ioe" identifier="ioe" declaration="true"/>
                  </fragments>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                  </type>
                </statements>
                <statements xsi:type="dom:ExpressionStatement">
                  <expression xsi:type="dom:MethodInvocation">
                    <arguments xsi:type="dom:SimpleName" fullyQualifiedName="ce" identifier="ce" declaration="false"/>
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="ioe" identifier="ioe" declaration="false"/>
                    <name fullyQualifiedName="initCause" identifier="initCause" declaration="false"/>
                  </expression>
                </statements>
                <statements xsi:type="dom:ThrowStatement">
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="ioe" identifier="ioe" declaration="false"/>
                </statements>
              </thenStatement>
            </statements>
          </body>
          <name fullyQualifiedName="validatePath" identifier="validatePath" declaration="true"/>
          <returnType xsi:type="dom:PrimitiveType" code="void"/>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="file" identifier="file" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
            </type>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <name fullyQualifiedName="IdeFilerImpl" identifier="IdeFilerImpl" declaration="true"/>
        <superInterfaceTypes xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="Filer" identifier="Filer" declaration="false"/>
        </superInterfaceTypes>
      </types>
    </ast>
  </compilationUnits>
  <compilationUnits elementName="IdeInputFileObject.java">
    <imports elementName="java.io.BufferedReader" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.IOException" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.InputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.InputStreamReader" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.OutputStream" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.Reader" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.io.Writer" isOnDemand="false" isStatic="false"/>
    <imports elementName="java.net.URI" isOnDemand="false" isStatic="false"/>
    <imports elementName="javax.tools.FileObject" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.resources.IFile" isOnDemand="false" isStatic="false"/>
    <imports elementName="org.eclipse.core.runtime.CoreException" isOnDemand="false" isStatic="false"/>
    <types elementName="IdeInputFileObject" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeInputFileObject" fullyQualifiedParametrizedName="org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeInputFileObject">
      <fields elementName="_file" isEnumConstant="false" typeSignature="QIFile;" isVolatile="false" isTransient="false"/>
      <methods elementName="IdeInputFileObject" returnType="V" isConstructor="true" isMainMethod="false">
        <parameters name="file" type="QIFile;"/>
      </methods>
      <methods elementName="delete" returnType="Z" isConstructor="false" isMainMethod="false"/>
      <methods elementName="getCharContent" returnType="QCharSequence;" isConstructor="false" isMainMethod="false">
        <parameters name="ignoreEncodingErrors" type="Z"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="getLastModified" returnType="J" isConstructor="false" isMainMethod="false"/>
      <methods elementName="getName" returnType="QString;" isConstructor="false" isMainMethod="false"/>
      <methods elementName="openInputStream" returnType="QInputStream;" isConstructor="false" isMainMethod="false">
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="openOutputStream" returnType="QOutputStream;" isConstructor="false" isMainMethod="false">
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="openReader" returnType="QReader;" isConstructor="false" isMainMethod="false">
        <parameters name="ignoreEncodingErrors" type="Z"/>
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="openWriter" returnType="QWriter;" isConstructor="false" isMainMethod="false">
        <exceptionTypes>QIOException;</exceptionTypes>
      </methods>
      <methods elementName="toUri" returnType="QURI;" isConstructor="false" isMainMethod="false"/>
    </types>
    <ast>
      <package>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Copyright (c) 2008 BEA Systems, Inc. "/>
            <fragments xsi:type="dom:TextElement" text="All rights reserved. This program and the accompanying materials"/>
            <fragments xsi:type="dom:TextElement" text="are made available under the terms of the Eclipse Public License v1.0"/>
            <fragments xsi:type="dom:TextElement" text="which accompanies this distribution, and is available at"/>
            <fragments xsi:type="dom:TextElement" text="http://www.eclipse.org/legal/epl-v10.html"/>
            <fragments xsi:type="dom:TextElement" text="Contributors:"/>
            <fragments xsi:type="dom:TextElement" text="wharley@bea.com - initial implementation"/>
          </tags>
        </javadoc>
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core.filer">
          <name fullyQualifiedName="filer" identifier="filer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable.core">
            <name fullyQualifiedName="core" identifier="core" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt.pluggable">
              <name fullyQualifiedName="pluggable" identifier="pluggable" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal.apt">
                <name fullyQualifiedName="apt" identifier="apt" declaration="false"/>
                <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt.internal">
                  <name fullyQualifiedName="internal" identifier="internal" declaration="false"/>
                  <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.jdt">
                    <name fullyQualifiedName="jdt" identifier="jdt" declaration="false"/>
                    <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                      <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                      <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
                    </qualifier>
                  </qualifier>
                </qualifier>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </package>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.BufferedReader">
          <name fullyQualifiedName="BufferedReader" identifier="BufferedReader" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.IOException">
          <name fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.InputStream">
          <name fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.InputStreamReader">
          <name fullyQualifiedName="InputStreamReader" identifier="InputStreamReader" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.OutputStream">
          <name fullyQualifiedName="OutputStream" identifier="OutputStream" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.Reader">
          <name fullyQualifiedName="Reader" identifier="Reader" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.io.Writer">
          <name fullyQualifiedName="Writer" identifier="Writer" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.io">
            <name fullyQualifiedName="io" identifier="io" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="java.net.URI">
          <name fullyQualifiedName="URI" identifier="URI" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="java.net">
            <name fullyQualifiedName="net" identifier="net" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="java" identifier="java" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools.FileObject">
          <name fullyQualifiedName="FileObject" identifier="FileObject" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="javax.tools">
            <name fullyQualifiedName="tools" identifier="tools" declaration="false"/>
            <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="javax" identifier="javax" declaration="false"/>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources.IFile">
          <name fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.resources">
            <name fullyQualifiedName="resources" identifier="resources" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <imports onDemand="false" static="false">
        <name xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime.CoreException">
          <name fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
          <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core.runtime">
            <name fullyQualifiedName="runtime" identifier="runtime" declaration="false"/>
            <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse.core">
              <name fullyQualifiedName="core" identifier="core" declaration="false"/>
              <qualifier xsi:type="dom:QualifiedName" fullyQualifiedName="org.eclipse">
                <name fullyQualifiedName="eclipse" identifier="eclipse" declaration="false"/>
                <qualifier xsi:type="dom:SimpleName" fullyQualifiedName="org" identifier="org" declaration="false"/>
              </qualifier>
            </qualifier>
          </qualifier>
        </name>
      </imports>
      <types xsi:type="dom:TypeDeclaration" localTypeDeclaration="false" memberTypeDeclaration="false" packageMemberTypeDeclaration="true" interface="false">
        <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
        <javadoc>
          <tags nested="false">
            <fragments xsi:type="dom:TextElement" text="Implementation of a FileObject returned by Filer.getResource()."/>
          </tags>
          <tags tagName="@since" nested="false">
            <fragments xsi:type="dom:TextElement" text=" 3.4"/>
          </tags>
        </javadoc>
        <bodyDeclarations xsi:type="dom:FieldDeclaration">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="true" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="true" native="false" private="false" protected="false" public="false" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <fragments extraDimensions="0">
            <name fullyQualifiedName="_file" identifier="_file" declaration="true"/>
          </fragments>
          <type xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
          </type>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="true" varargs="false">
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ExpressionStatement">
              <expression xsi:type="dom:Assignment" operator="=">
                <leftHandSide xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                <rightHandSide xsi:type="dom:SimpleName" fullyQualifiedName="file" identifier="file" declaration="false"/>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="IdeInputFileObject" identifier="IdeInputFileObject" declaration="false"/>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="file" identifier="file" declaration="true"/>
            <type xsi:type="dom:SimpleType">
              <name xsi:type="dom:SimpleName" fullyQualifiedName="IFile" identifier="IFile" declaration="false"/>
            </type>
          </parameters>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;An annotation processor is not permitted to delete resources&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalStateException" identifier="IllegalStateException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="delete" identifier="delete" declaration="true"/>
          <returnType xsi:type="dom:PrimitiveType" code="boolean"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Not yet implemented&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="UnsupportedOperationException" identifier="UnsupportedOperationException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getCharContent" identifier="getCharContent" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="CharSequence" identifier="CharSequence" declaration="false"/>
          </returnType>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="ignoreEncodingErrors" identifier="ignoreEncodingErrors" declaration="true"/>
            <type xsi:type="dom:PrimitiveType" code="boolean"/>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:MethodInvocation">
                <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                <name fullyQualifiedName="getModificationStamp" identifier="getModificationStamp" declaration="false"/>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getLastModified" identifier="getLastModified" declaration="true"/>
          <returnType xsi:type="dom:PrimitiveType" code="long"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:MethodInvocation">
                <expression xsi:type="dom:MethodInvocation">
                  <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                  <name fullyQualifiedName="getProjectRelativePath" identifier="getProjectRelativePath" declaration="false"/>
                </expression>
                <name fullyQualifiedName="toString" identifier="toString" declaration="false"/>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="getName" identifier="getName" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="String" identifier="String" declaration="false"/>
          </returnType>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:TryStatement">
              <catchClauses>
                <body>
                  <statements xsi:type="dom:ThrowStatement">
                    <expression xsi:type="dom:ClassInstanceCreation">
                      <arguments xsi:type="dom:SimpleName" fullyQualifiedName="e" identifier="e" declaration="false"/>
                      <type xsi:type="dom:SimpleType">
                        <name xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
                      </type>
                    </expression>
                  </statements>
                </body>
                <exception extraDimensions="0" varargs="false">
                  <name fullyQualifiedName="e" identifier="e" declaration="true"/>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="CoreException" identifier="CoreException" declaration="false"/>
                  </type>
                </exception>
              </catchClauses>
              <body>
                <statements xsi:type="dom:ReturnStatement">
                  <expression xsi:type="dom:MethodInvocation">
                    <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                    <name fullyQualifiedName="getContents" identifier="getContents" declaration="false"/>
                  </expression>
                </statements>
              </body>
            </statements>
          </body>
          <name fullyQualifiedName="openInputStream" identifier="openInputStream" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStream" identifier="InputStream" declaration="false"/>
          </returnType>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Writing to a non-generated file is not permitted&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalStateException" identifier="IllegalStateException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="openOutputStream" identifier="openOutputStream" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="OutputStream" identifier="OutputStream" declaration="false"/>
          </returnType>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:ClassInstanceCreation">
                  <arguments xsi:type="dom:MethodInvocation">
                    <name fullyQualifiedName="openInputStream" identifier="openInputStream" declaration="false"/>
                  </arguments>
                  <type xsi:type="dom:SimpleType">
                    <name xsi:type="dom:SimpleName" fullyQualifiedName="InputStreamReader" identifier="InputStreamReader" declaration="false"/>
                  </type>
                </arguments>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="BufferedReader" identifier="BufferedReader" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="openReader" identifier="openReader" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="Reader" identifier="Reader" declaration="false"/>
          </returnType>
          <parameters extraDimensions="0" varargs="false">
            <name fullyQualifiedName="ignoreEncodingErrors" identifier="ignoreEncodingErrors" declaration="true"/>
            <type xsi:type="dom:PrimitiveType" code="boolean"/>
          </parameters>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ThrowStatement">
              <expression xsi:type="dom:ClassInstanceCreation">
                <arguments xsi:type="dom:StringLiteral" escapedValue="&quot;Writing to a non-generated file is not permitted&quot;"/>
                <type xsi:type="dom:SimpleType">
                  <name xsi:type="dom:SimpleName" fullyQualifiedName="IllegalStateException" identifier="IllegalStateException" declaration="false"/>
                </type>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="openWriter" identifier="openWriter" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="Writer" identifier="Writer" declaration="false"/>
          </returnType>
          <thrownExceptions xsi:type="dom:SimpleName" fullyQualifiedName="IOException" identifier="IOException" declaration="false"/>
        </bodyDeclarations>
        <bodyDeclarations xsi:type="dom:MethodDeclaration" extraDimensions="0" constructor="false" varargs="false">
          <modifiers xsi:type="dom:MarkerAnnotation">
            <typeName xsi:type="dom:SimpleName" fullyQualifiedName="Override" identifier="Override" declaration="false"/>
          </modifiers>
          <modifiers xsi:type="dom:Modifier" abstract="false" final="false" native="false" private="false" protected="false" public="true" static="false" strictfp="false" synchronized="false" transient="false" volatile="false"/>
          <body>
            <statements xsi:type="dom:ReturnStatement">
              <expression xsi:type="dom:MethodInvocation">
                <expression xsi:type="dom:SimpleName" fullyQualifiedName="_file" identifier="_file" declaration="false"/>
                <name fullyQualifiedName="getLocationURI" identifier="getLocationURI" declaration="false"/>
              </expression>
            </statements>
          </body>
          <name fullyQualifiedName="toUri" identifier="toUri" declaration="true"/>
          <returnType xsi:type="dom:SimpleType">
            <name xsi:type="dom:SimpleName" fullyQualifiedName="URI" identifier="URI" declaration="false"/>
          </returnType>
        </bodyDeclarations>
        <name fullyQualifiedName="IdeInputFileObject" identifier="IdeInputFileObject" declaration="true"/>
        <superInterfaceTypes xsi:type="dom:SimpleType">
          <name xsi:type="dom:SimpleName" fullyQualifiedName="FileObject" identifier="FileObject" declaration="false"/>
        </superInterfaceTypes>
      </types>
    </ast>
  </compilationUnits>
</core:IPackageFragment>
