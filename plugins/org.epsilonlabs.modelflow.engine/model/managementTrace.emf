@namespace(uri="http://eclipse.org/epsilon/modelflow/management/trace/1.0", prefix="managementTrace")
package trace;

import "http://eclipse.org/epsilon/modelflow/1.0";

class EStringToObjectMapEntry : java.util.Map$Entry {
  attr String key;
  attr EJavaObject value;
}

class ManagementTrace {
	val TaskTrace[*] tasks;  
}

@exeed(classIcon="operation", label="return self.task.name + ' trace';")
class TaskTrace{
	val dom.Task task;
	val Trace[*] traces;	
}

@exeed(classIcon="transition")
class Trace {
  @exeed(featureLabel="source")
  val Element[*] sources;
  @exeed(featureLabel="return 'target';")
  val Element[*] targets;
  val Link link;
  val Property[*] properties;
}

abstract class Element {
	val dom.Resource container;
}

@exeed(classIcon="model", label="return self.container.name + '::' + self.elementId;")
class ModelElement extends Element {
  attr String elementId;
  attr String role;
}

@exeed(classIcon="parameter", label="return self.container.name + '::' + self.elementId + '::' + self.property;")
class ModelElementProperty extends ModelElement {
  attr String property;
  attr EJavaObject value;
}

@exeed(classIcon="text", label="return '@'+self.region.offset + ':' + self.region.length;")
class FileElement extends Element {
  val Region region;
}

@exeed(classIcon="object", label="return self.offset + ':' + self.length;")
class Region {
  attr int offset;
  attr int length;
}

@exeed(classIcon="link")
class Link {
	attr String link;	
}

@exeed(classIcon="operation", label="return self.link + ':' + self.managementOperation;")
class ManagementOperation extends Link {
  attr String managementOperation;
}

@exeed(classIcon="private", label="return self.key + '=' + self.value;")
class Property {
  attr String key;
  attr EJavaObject value;
}